function AudioFileRequest(e,t){this.url=e,(t===void 0||null==t)&&(t=!0),this.async=t;var i=e.split(".");this.extension=i[i.length-1].toLowerCase()}function Decoder(){}function WAVDecoder(){}function AIFFDecoder(){}Gibberish={memo:{},functions:{},upvalues:[],codeblock:[],analysisCodeblock:[],analysisUgens:[],dirtied:[],id:0,isDirty:!1,out:null,debug:!1,callback:"",audioFiles:{},sequencers:[],createCallback:function(){this.memo={},this.codeblock.length=0;for(var i=0;this.dirtied.length>i;i++)this.dirtied[i].codegen();if(this.dirtied.length=0,this.codestring=this.upvalues.join(""),this.codestring+="\nGibberish.callback = function() {\n	",this.memo={},this.out.getCodeblock(),this.codestring+=this.codeblock.join("	"),this.codestring+="\n	",this.codeblock.length=0,this.analysisUgens.length>0){this.analysisCodeblock.length=0;for(var i=0;this.analysisUgens.length>i;i++)this.codeblock.length=0,this.analysisUgens[i].codegen2(),this.codestring+=this.codeblock.join(""),this.codestring+="\n	",this.analysisCodeblock.push(this.analysisUgens[i].analysisCodegen());this.codestring+=this.analysisCodeblock.join("\n	"),this.codestring+="\n\n	"}this.codestring+="return "+this.out.variable+";\n",this.codestring+="}",this.callbackString=this.codestring,this.debug&&console.log(this.callbackString),eval(this.codestring)},audioProcess:function(e){for(var t=e.outputBuffer.getChannelData(0),i=e.outputBuffer.getChannelData(1),r=Gibberish,n=0,o=e.outputBuffer.length;o>n;n++){r.isDirty&&(r.createCallback(),r.isDirty=!1);for(var s=0;r.sequencers.length>s;s++)r.sequencers[s].tick();var a=r.callback();t[n]=a[0],i[n]=a[1]}},audioProcessFirefox:function(e){for(var t=Gibberish,i=0,r=e.length;r>i;i+=2){t.isDirty&&(t.createCallback(),t.isDirty=!1);var n=t.callback();e[i]=n[0],e[i+1]=n[1]}},clear:function(){this.upvalues.length=1,this.out.inputs.length=0,this.analysisUgens.length=0,Gibberish.dirty(this.out)},dirty:function(e){if(e!==void 0){for(var t=!1,i=0;this.dirtied.length>i;i++)this.dirtied[i].variable===e.variable&&(t=!0);t||(this.isDirty=!0,this.dirtied.push(e))}else this.isDirty=!0},generateSymbol:function(e){return e+"_"+this.id++},AudioDataDestination:function(e,t){var i=new Audio;i.mozSetup(2,e);var r,n=0,o=e/2,s=null;setInterval(function(){var e;if(s){if(e=i.mozWriteAudio(s.subarray(r)),n+=e,r+=e,s.length>r)return;s=null}var a=i.mozCurrentSampleOffset(),h=a+o-n;if(h>0){var p=new Float32Array(h);t(p),e=i.mozWriteAudio(p),a=i.mozCurrentSampleOffset(),p.length>e&&(s=p,r=e),n+=e}},100)},init:function(){Gibberish.out=new Gibberish.Bus2,Gibberish.dirty(Gibberish.out);var e=arguments[0]===void 0?1024:arguments[0];return start=function(){if(-1===navigator.userAgent.indexOf("Firefox")){if(document.getElementsByTagName("body")[0].removeEventListener("touchstart",start),Gibberish.context=new webkitAudioContext,Gibberish.node=Gibberish.context.createJavaScriptNode(e,2,2,44100),Gibberish.node.onaudioprocess=Gibberish.audioProcess,Gibberish.node.connect(Gibberish.context.destination),"ontouchstart"in document.documentElement){var t=Gibberish.context.createBufferSource();t.connect(Gibberish.context.destination),t.noteOn(0)}}else Gibberish.AudioDataDestination(44100,Gibberish.audioProcessFirefox)},"ontouchstart"in document.documentElement?document.getElementsByTagName("body")[0].addEventListener("touchstart",start):start(),this},makePanner:function(){var e=Math.sin,t=Math.cos,i=Math.sqrt(2)/2,r=function(r,n,o){var s="object"==typeof r,a=s?r[0]:r,h=s?r[1]:r;return o[0]=a*i*(t(n)-e(n)),o[1]=h*i*(t(n)+e(n)),o};return r},polyInit:function(e){e.mod=e.polyMod,e.removeMod=e.removePolyMod;for(var t in e.polyProperties)(function(t){var i=e.polyProperties[t];Object.defineProperty(e,t,{get:function(){return i},set:function(r){i=r;for(var n=0;e.children.length>n;n++)e.children[n][t]=i}})})(t)},interpolate:function(e,t){var i=0|t,r=i+1>e.length-1?0:i+1;return frac=t-i,e[i]+frac*(e[r]-e[i])},"export":function(e,t){for(var i in Gibberish[e])console.log("exporting",i,"from",e),t[i]=Gibberish[e][i]},ugen:function(){Gibberish.extend(this,{processProperties:function(){if("object"!=typeof arguments[0][0]||arguments[0][0].type!==void 0||Array.isArray(arguments[0][0])){var e=0;for(var t in this.properties)"object"==typeof this.properties[t]&&this.properties[t].binops!==void 0?arguments[0][e]!==void 0&&(this.properties[t].value=arguments[0][e++]):arguments[0][e]!==void 0&&(this.properties[t]=arguments[0][e++])}else{var i=arguments[0][0];for(var t in i)i[t]!==void 0&&("object"==typeof this.properties[t]&&this.properties[t].binops!==void 0?this.properties[t].value=i[t]:this[t]=i[t])}return this},codegen:function(){var e="",t=null;if(Gibberish.memo[this.symbol])return Gibberish.memo[this.symbol];t=this.variable?this.variable:Gibberish.generateSymbol("v"),Gibberish.memo[this.symbol]=t,this.variable=t,e+="var "+t+" = "+this.symbol+"(";for(var i in this.properties){var r=this.properties[i],n="";if("single_sample_delay"===this.name&&console.log("SSD PROP"+i),Array.isArray(r.value)){0===r.value.length&&(n=0);for(var o=0;r.value.length>o;o++){var s=r.value[o];n+="object"==typeof s?null!==s?s.codegen():"null":s,n+=r.value.length-1>o?", ":""}}else n="object"==typeof r.value?null!==r.value?r.value.codegen():"null":r.value;if(e+=n,r.binops)for(var a=0;r.binops.length>a;a++){var h,p=r.binops[a];h="number"==typeof p.ugen?p.ugen:null!==p.ugen?p.ugen.codegen():"null","="===p.binop?(e=e.replace(n,""),e+=h):"++"===p.binop?(Gibberish.upvalues.push("var abs = Math.abs\n;"),e+=" + abs("+h+")"):e+=" "+p.binop+" "+h}e+=", "}return" "===e.charAt(e.length-1)&&(e=e.slice(0,-2)),e+=");\n",null===this.codeblock&&Gibberish.upvalues.pushUnique("var "+this.symbol+" = Gibberish.functions."+this.symbol+";\n"),this.codeblock=e,this.dirty=!1,t},getCodeblock:function(){if(null!==this&&(null===this.codeblock&&this.codegen(),!Gibberish.memo[this.symbol])){if(Gibberish.memo[this.symbol]=this.variable,"analysis"!==this.type)for(var e in this.properties){var t=this.properties[e];if(Array.isArray(t.value))for(var i=t.value,r=0;i.length>r;r++){var n=i[r];"object"==typeof n&&null!==n&&n.getCodeblock()}else"object"==typeof t.value&&null!==t.value&&t.value.getCodeblock();if(t.binops)for(var o=0;t.binops.length>o;o++){var s=t.binops[o];"object"==typeof s.ugen&&null!==s.ugen&&s.ugen.getCodeblock()}}return"analysis"===this.type?Gibberish.codeblock.unshift(this.codeblock):Gibberish.codeblock.push(this.codeblock),this.variable}},defineUgenProperty:function(e,t){this.properties[e]={symbol:Gibberish.generateSymbol("v"),value:t,binops:[],getCodeblock:function(){"number"!=typeof this.value&&Gibberish.codeblock.push("var "+this.symbol+" = "+this.value+";\n")},codegen:function(){return"number"==typeof this.value||"string"==typeof this.value?this.value:this.symbol},parent:this,name:e},function(t){var i=e;Object.defineProperty(t,i,{configurable:!0,get:function(){return t.properties[i].value},set:function(e){t.properties[i].value=e,Gibberish.dirty(t)}})}(this)},init:function(){if(this.initalized||(this.symbol=Gibberish.generateSymbol(this.name),this.codeblock=null,this.variable=null),this.properties===void 0&&(this.properties={}),!this.initialized){this.destinations=[];for(var e in this.properties)this.defineUgenProperty(e,this.properties[e])}if(arguments.length>0&&"object"==typeof arguments[0][0]&&"undefined"===arguments[0][0].type){var t=arguments[0][0];for(var e in t)this[e]=t[e]}return Gibberish.functions[this.symbol]=this.callback,this.initialized=!0,this},mod:function(e,t,i){var r=this.properties[e],n={ugen:t,binop:i};r.binops.push(n),Gibberish.dirty(this)},removeMod:function(e,t){if(t===void 0)this.properties[e].binops.length=0;else if("number"==typeof t)this.properties[e].binops.splice(t,1);else if("object"==typeof t)for(var i=0,r=this.properties[e].binops.length;r>i;i++)this.properties[e].binops[i].ugen===t&&this.properties[e].binops.splice(i,1);Gibberish.dirty(this)},polyMod:function(e,t,i){for(var r=0;this.children.length>r;r++)this.children[r].mod(e,t,i);Gibberish.dirty(this)},removePolyMod:function(){var e=Array.prototype.slice.call(arguments,0);if("amp"!==arguments[0]&&"pan"!==arguments[0])for(var t=0;this.children.length>t;t++)this.children[t].removeMod.apply(this.children[t],e);else this.removeMod.apply(this,e);Gibberish.dirty(this)},smooth:function(e){var t=new Gibberish.OnePole;this.mod(e,t,"=")},connect:function(e){return e===void 0&&(e=Gibberish.out),-1===this.destinations.indexOf(e)&&(e.addConnection(this,1),this.destinations.push(e)),this},send:function(e,t){return-1===this.destinations.indexOf(e)?(e.addConnection(this,t),this.destinations.push(e)):e.adjustSendAmount(this,t),this},disconnect:function(e){if(e===void 0){for(var t=0;this.destinations.length>t;t++)this.destinations[t].removeConnection(this);this.destinations=[]}else{var i=this.destinations.indexOf(e);i>-1&&this.destinations.splice(i,1),e.removeConnection(this)}return this}})}},Array2=function(){this.length=0},Array2.prototype=[],Array2.prototype.remove=function(e,t){if(t=t===void 0?!0:t,e===void 0){for(var i=0;this.length>i;i++)delete this[i];this.length=0}else if("number"==typeof e)this.splice(e,1);else if("string"==typeof e){for(var r=[],i=0;this.length>i;i++){var n=this[i];if(n.type===e||n.name===e){if(!t)return this.splice(i,1),void 0;r.push(i)}}for(var i=0;r.length>i;i++)this.splice(r[i],1)}else if("object"==typeof e)for(var o=this.indexOf(e);o>-1;)this.splice(o,1),o=this.indexOf(e);this.parent&&Gibberish.dirty(this.parent)},Array2.prototype.get=function(e){if("number"==typeof e)return this[e];if("string"==typeof e)for(var t=0;this.length>t;t++){var i=this[t];if(i.name===e)return i}else if("object"==typeof e){var r=this.indexOf(e);if(r>-1)return this[r]}return null},Array2.prototype.replace=function(e,t){if(t.parent=this,t.input=e.input,"number"!=typeof e){var i=this.indexOf(e);i>-1&&this.splice(i,1,t)}else this.splice(e,1,t);this.parent&&Gibberish.dirty(this.parent)},Array2.prototype.insert=function(e,t){if(e.parent=this,this.input=this.parent,Array.isArray(e))for(var i=0;e.length>i;i++)this.splice(t+i,0,e[i]);else this.splice(t,0,e);this.parent&&Gibberish.dirty(this.parent)},Array2.prototype.add=function(){for(var e=0;arguments.length>e;e++)arguments[e].parent=this,arguments[e].input=this.parent,this.push(arguments[e]);this.parent&&(console.log("DIRTYING"),Gibberish.dirty(this.parent))},Array.prototype.pushUnique=function(){for(var e=0;arguments.length>e;e++){for(var t=arguments[e],i=!0,r=0;this.length>r;r++)if(t===this[r]){i=!1;break}i&&this.push(t)}};var rnd=Math.random;Gibberish.rndf=function(e,t,i,r){if(r=r===void 0?!0:r,i===void 0&&"object"!=typeof e){1==arguments.length?(e=0,t=arguments[0]):2==arguments.length?(e=arguments[0],t=arguments[1]):(e=0,t=1);var n=t-e,o=rnd(),s=n*o;return e+s}var a=[],h=[];i===void 0&&(i=t||e.length);for(var p=0;i>p;p++){var b;if("object"==typeof arguments[0])b=arguments[0][randomi(0,arguments[0].length-1)];else if(r)b=Gibberish.rndf(e,t);else{for(b=Gibberish.rndf(e,t);h.indexOf(b)>-1;)b=Gibberish.rndf(e,t);h.push(b)}a.push(b)}return a},Gibberish.extend=function(e,t){for(var i in t)i.split("."),t[i]instanceof Array&&100>t[i].length?(e[i]=t[i].slice(0),"fx"===i&&(e[i].parent=t[i].parent)):"object"!=typeof t[i]||null===t[i]||t[i]instanceof Float32Array?e[i]=t[i]:(e[i]=e[i]||{},arguments.callee(e[i],t[i]));return e},Function.prototype.clone=function(){return eval("["+(""+this)+"]")[0]},String.prototype.format=function(e,t,i){function r(){var r=this,n=arguments.length+1;for(e=0;n>e;i=arguments[e++])t=i,r=r.replace(RegExp("\\{"+(e-1)+"\\}","g"),t);return r}return r.native=String.prototype.format,r}(),Gibberish.Proxy=function(){var e=0;Gibberish.extend(this,{name:"proxy",type:"effect",properties:{},callback:function(){return e}}).init(),this.input=arguments[0],e=this.input.parent[this.input.name],delete this.input.parent[this.input.name],this.input.parent.properties[this.input.name].value=this,Object.defineProperty(this.input.parent,this.input.name,{get:function(){return e},set:function(t){e=t}}),Gibberish.dirty(this.input.parent)},Gibberish.Proxy.prototype=new Gibberish.ugen,Gibberish.oscillator=function(){this.type="oscillator",this.oscillatorInit=function(){return this.fx=new Array2,this.fx.parent=this,this}},Gibberish.oscillator.prototype=new Gibberish.ugen,Gibberish._oscillator=new Gibberish.oscillator,Gibberish.Sine=function(){this.name="sine",this.properties={frequency:arguments[0]||440,amp:arguments[1]||.5};for(var e=2*Math.PI,t=Math.sin,i=0,r=new Float32Array(1024),n=1024;n--;)r[n]=t(n/1024*e);this.getTable=function(){return r},this.callback=function(e,t){var n,o,s,a=43.06640625;for(i+=e/a;i>=1024;)i-=1024;return n=0|i,o=i-n,n=1023&n,s=1023===n?0:n+1,(r[n]+o*(r[s]-r[n]))*t},this.init(arguments),this.oscillatorInit(),this.processProperties(arguments)},Gibberish.Sine.prototype=Gibberish._oscillator,Gibberish.Sine2=function(){this.__proto__=new Gibberish.Sine,this.name="sine2",this.defineUgenProperty("pan",0);var e=this.__proto__.callback,t=Gibberish.makePanner(),i=[0,0];this.callback=function(r,n,o){var s=e(r,n);return i=t(s,o,i)},this.init(),this.oscillatorInit(),this.processProperties(arguments)},Gibberish.Saw=function(){this.name="saw",this.properties={frequency:440,amp:.15};var e=0;this.callback=function(t,i){var r=4*((e/2+.25)%.5-.25);return r*=i,e+=t/44100,e=e>1?e%1:e,r},this.init(),this.oscillatorInit(),this.processProperties(arguments)},Gibberish.Saw.prototype=Gibberish._oscillator,Gibberish.Saw2=function(){this.__proto__=new Gibberish.Saw,this.name="saw2",this.defineUgenProperty("pan",0);var e=this.__proto__.callback,t=Gibberish.makePanner(),i=[0,0];this.callback=function(r,n,o){var s=e(r,n);return i=t(s,o,i)},this.init()},Gibberish.Triangle=function(){var e=0,t=Math.abs;Gibberish.extend(this,{name:"triangle",properties:{frequency:440,amp:.15},callback:function(i,r){var n=1-4*t((e+.25)%1-.5);return n*=r,e+=i/44100,e=e>1?e%1:e,n}}).init().oscillatorInit().processProperties(arguments)},Gibberish.Triangle.prototype=Gibberish._oscillator,Gibberish.Triangle2=function(){this.__proto__=new Gibberish.Triangle,this.name="triangle2",this.defineUgenProperty("pan",0);var e=this.__proto__.callback,t=Gibberish.makePanner(),i=[0,0];this.callback=function(r,n,o){var s=e(r,n);return t(s,o,i)},this.init(),this.oscillatorInit(),this.processProperties(arguments)},Gibberish.Saw3=function(){var e=0,t=0,i=2.5,r=-1.5,n=0,o=Math.sin,s=11;pi_2=2*Math.PI,Gibberish.extend(this,{name:"saw",properties:{frequency:440,amp:.15},callback:function(a){var h=a/44100,p=.5-h,b=s*p*p*p*p,l=.376-.752*h,u=1-2*h,c=0;return t+=h,t-=t>1?2:0,e=.5*(e+o(pi_2*(t+e*b))),c=i*e+r*n,n=e,c+=l,c*u}}),Object.defineProperty(this,"scale",{get:function(){return s},set:function(e){s=e}}),this.init(),this.oscillatorInit(),this.processProperties(arguments)},Gibberish.Saw3.prototype=Gibberish._oscillator,Gibberish.PWM=function(){var e=0,t=0,i=0,r=0,n=0,o=2.5,s=-1.5,a=Math.sin,h=11;pi_2=2*Math.PI,test=0,Gibberish.extend(this,{name:"pwm",properties:{frequency:440,amp:.15,pulsewidth:.5},callback:function(p,b,l){var u=p/44100,c=.5-u,d=h*c*c*c*c,f=1-2*u,m=0;return n+=u,n-=n>1?2:0,e=.5*(e+a(pi_2*(n+e*d))),t=.5*(t+a(pi_2*(n+t*d+l))),m=t-e,m=o*m+s*(i-r),i=e,r=t,m*f*b}}),Object.defineProperty(this,"scale",{get:function(){return h},set:function(e){h=e}}),this.init(),this.oscillatorInit(),this.processProperties(arguments)},Gibberish.PWM.prototype=Gibberish._oscillator,Gibberish.Noise=function(){var e=Math.random;Gibberish.extend(this,{name:"noise",properties:{amp:1},callback:function(t){return(2*e()-1)*t}}),this.init(),this.oscillatorInit(),this.processProperties(arguments)},Gibberish.Noise.prototype=Gibberish._oscillator,Gibberish.KarplusStrong=function(){var e=[0],t=0,i=Math.random,r=Gibberish.makePanner(),n=[0,0];Gibberish.extend(this,{name:"karplus_strong",properties:{blend:1,damping:0,amp:1,channels:2,pan:0},note:function(t){var r=Math.floor(44100/t);e.length=0;for(var n=0;r>n;n++)e[n]=2*i()-1},callback:function(o,s,a,h,p){var b=e.shift(),l=i()>o?-1:1;s=s>0?s:0;var u=l*(b+t)*(.5-s/100);return t=u,e.push(u),u*=a,1===h?u:r(u,p,n)}}).init().oscillatorInit().processProperties(arguments)},Gibberish.KarplusStrong.prototype=Gibberish._oscillator,Gibberish.PolyKarplusStrong=function(){this.__proto__=new Gibberish.Bus2,Gibberish.extend(this,{name:"poly_karplus_strong",maxVoices:5,voiceCount:0,polyProperties:{blend:1,damping:0},note:function(e,t){var i=this.children[this.voiceCount++];this.voiceCount>=this.maxVoices&&(this.voiceCount=0),i.note(e,t)}}),this.amp=1/this.maxVoices,this.processProperties(arguments),this.children=[],this.dirty=!0;for(var e=0;this.maxVoices>e;e++){var t={blend:this.blend,damping:this.damping,channels:2,amp:1},i=new Gibberish.KarplusStrong(t).connect(this);this.children.push(i)}Gibberish.polyInit(this),Gibberish._synth.oscillatorInit.call(this)},Gibberish.bus=function(){this.type="bus",this.inputCodegen=function(){var e=this.value.codegen(),t=1===this.amp?e:e+" * "+this.amp;return this.codeblock=t,t},this.addConnection=function(){var e={value:arguments[0],amp:arguments[1],codegen:this.inputCodegen};e.getCodeblock=e.value.getCodeblock.bind(e.value),this.inputs.push(e),Gibberish.dirty(this)},this.removeConnection=function(e){for(var t=0;this.inputs.length>t;t++)if(this.inputs[t].value===e){this.inputs.splice(t,1),Gibberish.dirty(this);break}},this.adjustSendAmount=function(e,t){for(var i=0;this.inputs.length>i;i++)if(this.inputs[i].value===e){this.inputs[i].amp=t,Gibberish.dirty(this);break}},this.callback=function(){var e=arguments[arguments.length-2],t=arguments[arguments.length-1];output[0]=output[1]=0;for(var i=0;arguments.length-2>i;i++){var r="object"==typeof arguments[i];output[0]+=r?arguments[i][0]:arguments[i],output[1]+=r?arguments[i][1]:arguments[i]}return output[0]*=e,output[1]*=e,panner(output,t,output)}},Gibberish.bus.prototype=new Gibberish.ugen,Gibberish._bus=new Gibberish.bus,Gibberish.Bus=function(){return Gibberish.extend(this,{name:"bus",properties:{inputs:[],amp:arguments[1]||1},callback:function(){for(var e=0,t=arguments.length-1,i=arguments[t],r=0;t>r;r++)e+=args[r];return e*=i}}),this.init(),this},Gibberish.Bus.prototype=Gibberish._bus,Gibberish.Bus2=function(){this.name="bus2",this.type="bus",this.properties={inputs:[],amp:arguments[1]||1,pan:0};var e=[0,0],t=Gibberish.makePanner();this.callback=function(){var i=arguments[arguments.length-2],r=arguments[arguments.length-1];e[0]=e[1]=0;for(var n=0;arguments.length-2>n;n++){var o="object"==typeof arguments[n];e[0]+=o?arguments[n][0]:arguments[n],e[1]+=o?arguments[n][1]:arguments[n]}return e[0]*=i,e[1]*=i,t(e,r,e)},this.initialized=!1,this.init()},Gibberish.Bus2.prototype=Gibberish._bus,Gibberish.envelope=function(){this.type="envelope"},Gibberish.envelope.prototype=new Gibberish.ugen,Gibberish._envelope=new Gibberish.envelope,Gibberish.Line=function(e,t,i,r){var n={name:"line",properties:{start:e||0,end:isNaN(t)?1:t,time:i||44100,loops:r||!1}},o=0,s=(t-e)/i;return this.callback=function(e,t,i,r){var n=i>o?e+o++*s:t;return o=n>=t&&r?0:o,n},Gibberish.extend(this,n),this.init(),this},Gibberish.Line.prototype=Gibberish._envelope,Gibberish.AD=function(e,t){var i=0,r=0;Gibberish.extend(this,{name:"AD",properties:{attack:e||1e4,decay:t||1e4},run:function(){return r=0,i=0,this},callback:function(e,t){if(e=0>e?_4:e,t=0>t?_4:t,0===r){var n=1/e;i+=n,i>=1&&r++}else if(1===r){var n=1/t;i-=n,0>=i&&(i=0,r++)}return i},getState:function(){return r}}).init().processProperties(arguments)},Gibberish.AD.prototype=Gibberish._envelope,Gibberish.ADSR=function(e,t,i,r,n,o){var s={name:"adsr",type:"envelope",properties:{attack:isNaN(e)?1e4:e,decay:isNaN(t)?1e4:t,release:isNaN(r)?1e4:r,sustain:i===void 0?88200:i,attackLevel:n||1,sustainLevel:o||.5},run:function(){this.setPhase(0),this.setState(0)}};Gibberish.extend(this,s);var a=0,h=0;return this.callback=function(e,t,i,r,n,o){var s=0;return 0===h?(s=a/e*n,1===++a/e&&(h++,a=t)):1===h?(s=a/t*(n-o)+o,0>=--a&&(null!==i?(h+=1,a=i):(h+=2,a=r))):2===h?(s=o,0===a--&&(h++,a=r)):3===h&&(a--,s=a/r*o,0>=a&&h++),s},this.setPhase=function(e){a=e},this.setState=function(e){h=e,a=0},this.getState=function(){return h},this.init(),this},Gibberish.ADSR.prototype=Gibberish._envelope,Gibberish.analysis=function(){this.type="analysis",this.codegen=function(){return Gibberish.memo[this.symbol]?Gibberish.memo[this.symbol]:(v=this.variable?this.variable:Gibberish.generateSymbol("v"),Gibberish.memo[this.symbol]=v,this.variable=v,Gibberish.upvalues.push("var "+this.symbol+" = Gibberish.functions."+this.symbol+";\n"),this.codeblock="var "+this.variable+" = "+this.symbol+"();\n",this.variable)},this.codegen2=function(){for(var e in this.properties){var t=this.properties[e];if(Array.isArray(t.value))for(var i=0;t.value.length>i;i++){var r=t.value[i];"object"==typeof r&&(r.type="ddd",r.codegen(),r.getCodeblock(),r.type="analysis")}else if("object"==typeof t.value&&!Gibberish.memo[t.value.symbol]){t.value.type="ddd",t.value.codegen(),t.value.getCodeblock(),Gibberish.codeblock.push(t.value.codeblock),t.value.type="analysis";var n=t.value.variable?t.value.variable:Gibberish.generateSymbol("v");Gibberish.memo[t.value.symbol]=n,t.value.variable=n,Gibberish.codestring="var "+t.value.symbol+" = Gibberish.functions."+t.value.symbol+";\n"+Gibberish.codestring}if(t.binops)for(var o=0;t.binops.length>o;o++){var s=t.binops[o];"object"==typeof s.ugen&&s.ugen.codegen()}}},this.analysisCodegen=function(){var e=this.analysisSymbol+"("+this.input.variable+",";for(var t in this.properties)"input"!==t&&(e+=this[t]+",");return e=e.slice(0,-1),e+=");",this.analysisCodeblock=e,e},this.analysisInit=function(){this.analysisSymbol=Gibberish.generateSymbol(this.name),Gibberish.functions[this.analysisSymbol]=this.analysisCallback,Gibberish.upvalues.push("var "+this.analysisSymbol+" = Gibberish.functions."+this.analysisSymbol+";\n"),Gibberish.analysisUgens.push(this)}},Gibberish.analysis.prototype=new Gibberish.ugen,Gibberish._analysis=new Gibberish.analysis,Gibberish.Follow=function(){this.name="follow",this.properties={mult:1,input:0,bufferSize:4410};var e=Math.abs,t=[0],i=0,r=0,n=0;this.analysisCallback=function(o,s,a){i+=e(o),i-=t[r],t[r]=e(o),r=(r+1)%s,t[r]=t[r]?t[r]:0,n=i/s*a},this.callback=function(){return n},this.init()},Gibberish.Follow.prototype=Gibberish._analysis,Gibberish.SingleSampleDelay=function(){this.name="single_sample_delay",this.properties={input:arguments[0]||0,amp:arguments[1]||1};var e=0;this.analysisCallback=function(t,i){e="object"==typeof t?"object"==typeof t?[t[0]*i,t[1]*i]:t*i:t*i},this.callback=function(){return e},this.init(),this.analysisInit()},Gibberish.SingleSampleDelay.prototype=Gibberish._analysis,Gibberish.Record=function(e,t,i){var r=new Float32Array(t),n=0,o=!1,s=this;Gibberish.extend(this,{name:"record",oncomplete:i,properties:{input:0,size:t||0},analysisCallback:function(e,t){o&&(r[n++]="object"==typeof e?e[0]+e[1]:e,n>=t&&(o=!1,s.remove()))},record:function(){return n=0,o=!0,this},getBuffer:function(){return r},getPhase:function(){return n},remove:function(){this.oncomplete!==void 0&&this.oncomplete();for(var e=0;Gibberish.analysisUgens.length>e;e++){var t=Gibberish.analysisUgens[e];if(t===this)return Gibberish.analysisUgens.splice(e,1),void 0}}}),this.properties.input=e,this.init(),this.analysisInit(),Gibberish.dirty()},Gibberish.Record.prototype=Gibberish._analysis,Gibberish.effect=function(){this.type="effect"},Gibberish.effect.prototype=new Gibberish.ugen,Gibberish._effect=new Gibberish.effect,Gibberish.Distortion=function(){var e=Math.abs,t=Math.log,i=Math.LN2;Gibberish.extend(this,{name:"distortion",properties:{input:0,amount:50},callback:function(r,n){var o;return n=n>2?n:2,"number"==typeof r?(o=r*n,r=o/(1+e(o))/(t(n)/i)):(o=r[0]*n,r[0]=o/(1+e(o))/(t(n)/i),o=r[1]*n,r[1]=o/(1+e(o))/(t(n)/i)),r}}).init().processProperties(arguments)},Gibberish.Distortion.prototype=Gibberish._effect,Gibberish.Delay=function(){var e=[],t=0;e.push(new Float32Array(88200)),e.push(new Float32Array(88200)),Gibberish.extend(this,{name:"Delay",properties:{input:0,time:22050,feedback:.5},callback:function(i,r,n){var o="number"==typeof i?1:2,s=t++%88200,a=(s+r)%88200;return 1===o?(e[0][a]=(i+e[0][s])*n,i+=e[0][s]):(e[0][a]=(i[0]+e[0][s])*n,i[0]+=e[0][s],e[1][a]=(i[1]+e[1][s])*n,i[1]+=e[1][s]),i}}).init().processProperties(arguments)},Gibberish.Delay.prototype=Gibberish._effect,Gibberish.Decimator=function(){var e=0,t=[],i=Math.pow,r=Math.floor;Gibberish.extend(this,{name:"Decimator",properties:{input:0,bitDepth:16,sampleRate:1},callback:function(n,o,s){e+=s;var a="number"==typeof n?1:2;if(1===a){if(e>=1){var h=i(o,2);t[0]=r(n*h)/h,e-=1}n=t[0]}else{if(e>=1){var h=i(o,2);t[0]=r(n[0]*h)/h,t[1]=r(n[1]*h)/h,e-=1}n=t}return n}}).init().processProperties(arguments)},Gibberish.Decimator.prototype=Gibberish._effect,Gibberish.RingModulation=function(){var e=(new Gibberish.Sine).callback,t=[0,0];Gibberish.extend(this,{name:"ringmod",properties:{input:0,frequency:440,amp:.5,mix:.5},callback:function(i,r,n,o){var s="number"==typeof i?1:2,a=1===s?i:i[0],h=e(r,n);if(a=a*(1-o)+a*h*o,2===s){var p=i[1];return p=p*(1-o)+p*h*o,t[0]=a,t[1]=p,t}return a}}).init().processProperties(arguments)},Gibberish.RingModulation.prototype=Gibberish._effect,Gibberish.OnePole=function(){var e=0;Gibberish.extend(this,{name:"onepole",type:"effect",properties:{input:null,a0:.15,b1:.85},callback:function(t,i,r){var n=t*i+e*r;return e=n,n},smooth:function(e,t){this.input=t.properties[e],t.mod(e,this,"=")}}).init().processProperties(arguments)},Gibberish.OnePole.prototype=Gibberish._effect,Gibberish.Filter24=function(){var e=[0,0,0,0],t=[0,0,0,0],i=[0,0],r=isNaN(arguments[0])?.1:arguments[0],n=isNaN(arguments[1])?3:arguments[1];_isLowPass=arguments[2]!==void 0?arguments[2]:!0,Gibberish.extend(this,{name:"filter24",properties:{input:0,cutoff:r,resonance:n,isLowPass:_isLowPass},callback:function(r,n,o,s){var a="number"==typeof r?1:2,h=1===a?r:r[0],p=e[3]*o;if(p=p>1?1:p,n=0>n?0:n,n=n>1?1:n,h-=p,e[0]=e[0]+(-e[0]+h)*n,e[1]=e[1]+(-e[1]+e[0])*n,e[2]=e[2]+(-e[2]+e[1])*n,e[3]=e[3]+(-e[3]+e[2])*n,h=s?e[3]:h-e[3],2===a){var b=r[1];return p=t[3]*o,p=p>1?1:p,b-=p,t[0]=t[0]+(-t[0]+b)*n,t[1]=t[1]+(-t[1]+t[0])*n,t[2]=t[2]+(-t[2]+t[1])*n,t[3]=t[3]+(-t[3]+t[2])*n,b=s?t[3]:b-t[3],i[0]=h,i[1]=h,i}return h}}).init().processProperties(arguments)},Gibberish.Filter24.prototype=Gibberish._effect,Gibberish.SVF=function(){var e=[0,0],t=[0,0],i=Math.PI,r=[0,0];Gibberish.extend(this,{name:"SVF",properties:{input:0,cutoff:440,Q:2,mode:0},callback:function(n,o,s,a){var h="number"==typeof n?1:2,p=1===h?n:n[0],b=2*i*o/44100;s=1/s;var l=t[0]+b*e[0],u=p-l-s*e[0],c=b*u+e[0],d=u+l;if(e[0]=c,t[0]=l,p=0===a?l:1===a?u:2===a?c:d,2===h){var f=n[1],l=t[1]+b*e[1],u=f-l-s*e[1],c=b*u+e[1],d=u+l;e[1]=c,t[1]=l,f=0===a?l:1===a?u:2===a?c:d,r[0]=p,r[1]=f}else r=p;return r}}).init().processProperties(arguments)},Gibberish.SVF.prototype=Gibberish._effect,Gibberish.Biquad=function(){var e=[0,0],t=[0,0],i=[0,0],r=[0,0],n=[0,0];Gibberish.extend(this,{name:"biquad",mode:"LP",cutoff:2e3,Q:.5,properties:{input:null,b0:.001639,b1:.003278,b2:.001639,a1:-1.955777,a2:.960601},calculateCoefficients:function(){switch(this.mode){case"LP":var e=2*Math.PI*this.cutoff/44100,t=Math.sin(e),i=Math.cos(e),r=t/(2*this.Q),n=(1-i)/2,o=1-i,s=n,a=1+r,h=-2*i,p=1-r;break;case"HP":var e=2*Math.PI*this.cutoff/44100,t=Math.sin(e),i=Math.cos(e),r=t/(2*this.Q),n=(1+i)/2,o=-(1+i),s=n,a=1+r,h=-2*i,p=1-r;break;case"BP":var e=2*Math.PI*this.cutoff/44100,t=Math.sin(e),i=Math.cos(e),b=Math.log(2)/2*this.Q*e/t,r=t*(Math.exp(b)-Math.exp(-b))/2,n=r,o=0,s=-r,a=1+r,h=-2*i,p=1-r;break;default:return}this.b0=n/a,this.b1=o/a,this.b2=s/a,this.a1=h/a,this.a2=p/a},call:function(e){return this.function(e,this.b0,this.b1,this.b2,this.a1,this.a2)},callback:function(o,s,a,h,p,b){var l="number"==typeof o?1:2,u=0,c=0,d=1===l?o:o[0];return u=s*d+a*e[0]+h*t[0]-p*i[0]-b*r[0],t[0]=e[0],e[0]=o[0],r[0]=i[0],i[0]=u,2===l&&(inR=o[1],c=s*inR+a*e[1]+h*t[1]-p*i[1]-b*r[1],t[1]=e[1],e[1]=o[1],r[1]=i[1],i[1]=c,n[0]=u,n[1]=c),1===l?u:n}}).init().processProperties(arguments),this.calculateCoefficients()},Gibberish.Biquad.prototype=Gibberish._effect,Gibberish.Flanger=function(){var e=[new Float32Array(88200),new Float32Array(88200)],t=88200,i=(new Gibberish.Sine).callback,r=Gibberish.interpolate,n=-100,o=0;Gibberish.extend(this,{name:"flanger",properties:{input:0,rate:.25,amount:125,feedback:0,offset:125},callback:function(s,a,h,p,b,l){var l="number"==typeof s?1:2,u=n+i(a,.95*h);u>t?u-=t:0>u&&(u+=t);var c=r(e[0],u);return e[0][o]=1===l?s+c*p:s[0]+c*p,2===l?(s[0]+=c,c=r(e[1],u),e[1][o]=s[1]+c*p,s[1]+=c):s+=c,++o>=t&&(o=0),++n>=t&&(n=0),s}}).init().processProperties(arguments),n=-1*this.offset},Gibberish.Flanger.prototype=Gibberish._effect,Gibberish.Vibrato=function(){var e=[new Float32Array(88200),new Float32Array(88200)],t=88200,i=(new Gibberish.Sine).callback,r=Gibberish.interpolate,n=-100,o=0;Gibberish.extend(this,{name:"vibrato",properties:{input:0,rate:5,amount:.5,offset:125},callback:function(s,a,h,p){var b="number"==typeof s?1:2,l=n+i(a,h*p-1);l>t?l-=t:0>l&&(l+=t);var u=r(e[0],l);return e[0][o]=1===b?s:s[0],2===b?(s[0]=u,u=r(e[1],l),e[1][o]=s[1],s[1]=u):s=u,++o>=t&&(o=0),++n>=t&&(n=0),s}}).init().processProperties(arguments),n=-1*this.offset},Gibberish.Vibrato.prototype=Gibberish._effect,Gibberish.BufferShuffler=function(){var e=[new Float32Array(88200),new Float32Array(88200)],t=88200,i=0,r=0,n=0,o=0,s=0,a=Math.random,h=1,p=!1,b=!1,l=!1,u=Gibberish.interpolate,c=!1,d=1,f=!1,m=Gibberish.rndf,y=[0,0];Gibberish.extend(this,{name:"buffer_shuffler",properties:{input:0,chance:.25,rate:11025,length:22050,reverseChange:.5,pitchChance:.5,pitchMin:.25,pitchMax:2,wet:1,dry:0},callback:function(g,v,G,w,k,S,x,T,A,_){var F="number"==typeof g?1:2;s?0===++o%(w-400)&&(p=!1,b=!0,h=1,o=0):(e[0][r]=1===F?g:g[0],e[1][r]=1===F?g:g[1],r++,r%=t,f=0===r?1:f,n++,0==n%G&&v>a()&&(l=k>a(),s=!0,l||(i=r-w,0>i&&(i=t+i)),c=S>a(),c&&(d=m(x,T)),h=1,p=!0,b=!1)),i+=l?-1*d:d,0>i?i+=t:i>t&&(i-=t);var M,P,q,N,O=u(e[0],i);return p?(h-=.0025,q=O*(1-h),M=1===F?q+g*h:q+g[0]*h,2===F&&(N=u(e[1],i),q=N*(1-h),P=1===F?M:q+g[1]*h),.0025>=h&&(p=!1)):b?(h-=.0025,q=O*h,M=1===F?q+g*h:q+g[0]*(1-h),2===F&&(N=u(e[1],i),q=N*h,P=q+g[1]*(1-h)),.0025>=h&&(b=!1,s=!1,l=!1,d=1,c=0)):1===F?M=s&&f?O*A+g*_:g:(N=u(e[1],i),M=s&&f?O*A+g[0]*_:g[0],P=s&&f?N*A+g[1]*_:g[1]),y=[M,P],1===F?M:y}}).init().processProperties(arguments)},Gibberish.BufferShuffler.prototype=Gibberish._effect,Gibberish.AllPass=function(e){var t=-1,i=new Float32Array(e||500),r=i.length;Gibberish.extend(this,{name:"allpass",properties:{input:0},callback:function(e){t=++t%r;var n=i[t],o=-1*e+n;return i[t]=e+.5*n,o}})},Gibberish.Comb=function(e){var t=new Float32Array(e||1200),i=t.length,r=0,n=0;Gibberish.extend(this,{name:"comb",properties:{input:0,time:e||1200},callback:function(e){var o=++r%i,s=t[o];return n=.8*s+.2*n,t[o]=e+.84*n,s}})},Gibberish.Reverb=function(){var e={combCount:8,combTuning:[1116,1188,1277,1356,1422,1491,1557,1617],allPassCount:4,allPassTuning:[556,441,341,225],allPassFeedback:.5,fixedGain:.015,scaleDamping:.9,scaleRoom:.28,offsetRoom:.7,stereoSpread:23},t=[],i=[],r=[0,0];Gibberish.extend(this,{name:"Reverb",roomSize:.5,damping:.2223,properties:{input:0,wet:.5,dry:.55},callback:function(e,n,o){for(var s="object"==typeof e?2:1,a=1===s?e:e[0]+e[1],h=.015*a,p=h,b=0;8>b;b++){var l=t[b](h);p+=l}for(var b=0;4>b;b++)p=i[b](p);return r[0]=r[1]=a*o+p*n,r}}).init().processProperties(arguments);for(var n=0;8>n;n++)t.push(new Gibberish.Comb(e.combTuning[n],this.roomSize*e.scaleRoom*e.offsetRoom,this.damping).callback);for(var n=0;4>n;n++)i.push(new Gibberish.AllPass(e.allPassTuning[n],e.allPassFeedback).callback)},Gibberish.Reverb.prototype=Gibberish._effect,Gibberish.Granulator=function(e){var t=[];buffer=null,interpolate=Gibberish.interpolate,panner=Gibberish.makePanner(),bufferLength=0,debug=0,write=0,self=this,out=[0,0],_out=[0,0],rndf=Gibberish.rndf,numberOfGrains=e.numberOfGrains||20,Gibberish.extend(this,{name:"granulator",bufferLength:88200,reverse:!0,spread:.5,properties:{speed:1,speedMin:0,speedMax:0,grainSize:1e3,position:.5,positionMin:0,positionMax:0,amp:.2,fade:.1,pan:0,shouldWrite:!1},callback:function(e,i,r,n,o,s,a,h,p,b){for(var l=0;numberOfGrains>l;l++){var u=t[l];
if(u._speed>0){u.pos>u.end&&(u.pos=(a+rndf(o,s))*buffer.length,u.start=u.pos,u.end=u.start+n,u._speed=e+rndf(i,r),u._speed=.1>u._speed?.1:u._speed,u._speed=.1>u._speed&&u._speed>0?.1:u._speed,u._speed=u._speed>-.1&&0>u._speed?-.1:u._speed,u.fadeAmount=u._speed*p*n,u.pan=rndf(-1*self.spread,self.spread));for(var c=u.pos;c>buffer.length;)c-=buffer.length;for(;0>c;)c+=buffer.length;var d=interpolate(buffer,c);d*=u.pos<u.fadeAmount+u.start?(u.pos-u.start)/u.fadeAmount:1,d*=u.pos>u.end-u.fadeAmount?(u.end-u.pos)/u.fadeAmount:1}else{u.pos<u.end&&(u.pos=(a+rndf(o,s))*buffer.length,u.start=u.pos,u.end=u.start-n,u._speed=e+rndf(i,r),u._speed=.1>u._speed&&u._speed>0?.1:u._speed,u._speed=u._speed>-.1&&0>u._speed?-.1:u._speed,u.fadeAmount=u._speed*p*n);for(var c=u.pos;c>buffer.length;)c-=buffer.length;for(;0>c;)c+=buffer.length;var d=interpolate(buffer,c);d*=u.pos>u.start-u.fadeAmount?(u.start-u.pos)/u.fadeAmount:1,d*=u.pos<u.end+u.fadeAmount?(u.end-u.pos)/u.fadeAmount:1}_out=panner(d*h,u.pan,_out),out[0]+=_out[0],out[1]+=_out[1],u.pos+=u._speed}return panner(out,b,out)}}).init().processProperties(arguments);for(var i=0;numberOfGrains>i;i++)t[i]={pos:self.position+Gibberish.rndf(self.positionMin,self.positionMax),_speed:self.speed+Gibberish.rndf(self.speedMin,self.speedMax)},t[i].start=t[i].pos,t[i].end=t[i].pos+self.grainSize,t[i].fadeAmount=t[i]._speed*self.fade*self.grainSize,t[i].pan=Gibberish.rndf(-1*self.spread,self.spread);e.input!==void 0?(that.shouldWrite=!0,that.sampler=new Gibberish.Sampler,that.sampler.connect(),that.sampler.record(e.buffer,that.bufferLength),that.buffer=that.sampler.buffer):e.buffer!==void 0&&(buffer=e.buffer,bufferLength=buffer.length)},Gibberish.Granulator.prototype=Gibberish._effect,Gibberish.synth=function(){this.type="oscillator",this.oscillatorInit=function(){this.fx=new Array2,this.fx.parent=this}},Gibberish.synth.prototype=new Gibberish.ugen,Gibberish._synth=new Gibberish.synth,Gibberish.Synth=function(){this.name="synth",this.properties={frequency:0,pulsewidth:.5,attack:22050,decay:22050,glide:.15,amp:.25,channels:2,pan:0},this.note=function(t,i){this.frequency=t,_frequency=t,i!==void 0&&(this.amp=i),e.run()};var e=new Gibberish.AD,t=e.getState,i=e.callback,r=new Gibberish.PWM,n=r.callback,o=(new Gibberish.OnePole).callback,s=Gibberish.makePanner(),a=[0,0];this.callback=function(e,r,h,p,b,l,u,c){if(b=b>=1?.99999:b,e=o(e,1-b,b),2>t()){var d=i(h,p),f=n(e,1,r)*d*l;return a[0]=a[1]=f,1===u?f:s(f,c,a)}return f=a[0]=a[1]=0,1===u?f:s(f,c,a)},this.getOsc=function(){return r},this.setOsc=function(e){r=e,n=r.callback};var h="PWM";Object.defineProperty(this,"waveform",{get:function(){return h},set:function(e){this.setOsc(new Gibberish[e])}}),this.init(),this.oscillatorInit(),this.processProperties(arguments)},Gibberish.Synth.prototype=Gibberish._synth,Gibberish.PolySynth=function(){this.__proto__=new Gibberish.Bus2,Gibberish.extend(this,{name:"polysynth",maxVoices:5,voiceCount:0,polyProperties:{glide:0,attack:22050,decay:22050,pulsewidth:.5,waveform:"PWM"},note:function(e,t){var i=this.children[this.voiceCount++];this.voiceCount>=this.maxVoices&&(this.voiceCount=0),i.note(e,t)}}),this.amp=1/this.maxVoices,this.processProperties(arguments),this.children=[],this.dirty=!0;for(var e=0;this.maxVoices>e;e++){var t={attack:this.attack,decay:this.decay,pulsewidth:this.pulsewidth,channels:2,amp:1},i=new Gibberish.Synth(t);i.connect(this),this.children.push(i)}Gibberish.polyInit(this),Gibberish._synth.oscillatorInit.call(this)},Gibberish.Synth2=function(){this.name="synth2",this.properties={frequency:0,pulsewidth:.5,attack:22050,decay:22050,cutoff:.25,resonance:3.5,useLowPassFilter:!0,glide:.15,amp:.25,channels:1,pan:0},this.note=function(t,i){this.frequency=t,_frequency=t,i!==void 0&&(this.amp=i),e.run()};var e=new Gibberish.AD,t=e.getState,i=e.callback,r=new Gibberish.PWM,n=r.callback,o=new Gibberish.Filter24,s=o.callback,a=(new Gibberish.OnePole).callback,h=Gibberish.makePanner(),p=[0,0];this.callback=function(e,r,o,b,l,u,c,d,f,m,y){if(2>t()){d=d>=1?.99999:d,e=a(e,1-d,d);var g=i(o,b),v=s(n(e,.15,r),l*g,u,c)*g*f;return p[0]=p[1]=v,1===m?v:h(v,y,p)}return v=p[0]=p[1]=0,1===m?v:h(v,y,p)},this.getOsc=function(){return r},this.setOsc=function(e){r=e,n=r.callback};var b="PWM";Object.defineProperty(this,"waveform",{get:function(){return b},set:function(e){this.setOsc(new Gibberish[e])}}),this.init(),this.oscillatorInit(),this.processProperties(arguments)},Gibberish.Synth2.prototype=Gibberish._synth,Gibberish.FMSynth=function(){this.name="fmSynth",this.properties={frequency:0,cmRatio:2,index:5,attack:22050,decay:22050,glide:.15,amp:.25,channels:2,pan:0},this.note=function(t,i){this.frequency=t,_frequency=t,i!==void 0&&(this.amp=i),e.run()};var e=new Gibberish.AD,t=e.getState,i=e.callback,r=(new Gibberish.Sine).callback,n=(new Gibberish.Sine).callback,o=(new Gibberish.OnePole).callback,s=Gibberish.makePanner(),a=[0,0],h=!1;this.callback=function(e,p,b,l,u,c,d,f,m){if(2>t()){c>=1&&(c=.9999),e=o(e,1-c,c);var y=i(l,u),g=n(e*p,e*b)*y,v=r(e+g,1,1)*y*d;return isNaN(v)&&!h&&(console.log(e,g,p,e*b,y,d,v),h=!0),a[0]=a[1]=v,1===f?v:s(v,m,a)}return v=a[0]=a[1]=0,1===f?v:s(v,m,a)},this.init(),this.oscillatorInit(),this.processProperties(arguments)},Gibberish.FMSynth.prototype=Gibberish._synth,Gibberish.PolyFM=function(){this.__proto__=new Gibberish.Bus2,Gibberish.extend(this,{name:"polyfm",maxVoices:5,voiceCount:0,children:[],polyProperties:{glide:0,attack:22050,decay:22050,index:5,cmRatio:2},note:function(e,t){var i=this.children[this.voiceCount++];this.voiceCount>=this.maxVoices&&(this.voiceCount=0),i.note(e,t)}}),this.amp=1/this.maxVoices,this.processProperties(arguments);for(var e=0;this.maxVoices>e;e++){var t={attack:this.attack,decay:this.decay,cmRatio:this.cmRatio,index:this.index,channels:2,amp:1},i=new Gibberish.FMSynth(t);i.connect(this),this.children.push(i)}Gibberish.polyInit(this),Gibberish._synth.oscillatorInit.call(this)},AudioFileRequest.prototype.onSuccess=function(){},AudioFileRequest.prototype.onFailure=function(){},AudioFileRequest.prototype.send=function(){if("wav"!=this.extension&&"aiff"!=this.extension&&"aif"!=this.extension)return this.onFailure(),void 0;var e=new XMLHttpRequest;e.open("GET",this.url,this.async),e.overrideMimeType("text/plain; charset=x-user-defined"),e.onreadystatechange=function(){4==e.readyState&&(200==e.status||0==e.status?this.handleResponse(e.responseText):this.onFailure())}.bind(this),e.send(null)},AudioFileRequest.prototype.handleResponse=function(e){var t,i;"wav"==this.extension?(t=new WAVDecoder,i=t.decode(e)):("aiff"==this.extension||"aif"==this.extension)&&(t=new AIFFDecoder,i=t.decode(e)),this.onSuccess(i)},Decoder.prototype.readString=function(e,t,i){return e.slice(t,t+i)},Decoder.prototype.readIntL=function(e,t,i){for(var r=0,n=0;i>n;n++)r+=(255&e.charCodeAt(t+n))*Math.pow(2,8*n);return r},Decoder.prototype.readChunkHeaderL=function(e,t){var i={};return i.name=this.readString(e,t,4),i.length=this.readIntL(e,t+4,4),i},Decoder.prototype.readIntB=function(e,t,i){for(var r=0,n=0;i>n;n++)r+=(255&e.charCodeAt(t+n))*Math.pow(2,8*(i-n-1));return r},Decoder.prototype.readChunkHeaderB=function(e,t){var i={};return i.name=this.readString(e,t,4),i.length=this.readIntB(e,t+4,4),i},Decoder.prototype.readFloatB=function(e,t){var i=this.readIntB(e,t,2),r=32768;i>=r&&(i|=~(r-1));var n=1;0>i&&(n=-1,i+=r);var o,s=this.readIntB(e,t+2,4),a=this.readIntB(e,t+6,4);return 0==(i==s==a)?o=0:32767==i?o=Number.MAX_VALUE:(i-=16383,o=(4294967296*s+a)*Math.pow(2,i-63)),n*o},WAVDecoder.prototype.__proto__=Decoder.prototype,WAVDecoder.prototype.decode=function(e){var t={},i=0,r=this.readChunkHeaderL(e,i);if(i+=8,"RIFF"!=r.name)return console.error("File is not a WAV"),null;var n=r.length;n+=8;var o=this.readString(e,i,4);if(i+=4,"WAVE"!=o)return console.error("File is not a WAV"),null;for(;n>i;){var r=this.readChunkHeaderL(e,i);if(i+=8,"fmt "==r.name){var s=this.readIntL(e,i,2);if(i+=2,1!=s)return console.error("Cannot decode non-PCM encoded WAV file"),null;var a=this.readIntL(e,i,2);i+=2;var h=this.readIntL(e,i,4);i+=4,i+=4,i+=2;var p=this.readIntL(e,i,2),b=p/8;i+=2}else if("data"==r.name){for(var l=r.length/(b*a),u=[],c=0;a>c;c++)u.push(new Float32Array(l));for(var c=0;a>c;c++)for(var d=u[c],f=0;l>f;f++){var m=i;m+=(f*a+c)*b;var y=this.readIntL(e,m,b),g=1<<p-1;y>=g&&(y|=~(g-1)),d[f]=y/g}i+=r.length}else i+=r.length}return t.sampleRate=h,t.bitDepth=p,t.channels=u,t.length=l,t},AIFFDecoder.prototype.__proto__=Decoder.prototype,AIFFDecoder.prototype.decode=function(e){var t={},i=0,r=this.readChunkHeaderB(e,i);if(i+=8,"FORM"!=r.name)return console.error("File is not an AIFF"),null;var n=r.length;n+=8;var o=this.readString(e,i,4);if(i+=4,"AIFF"!=o)return console.error("File is not an AIFF"),null;for(;n>i;){var r=this.readChunkHeaderB(e,i);if(i+=8,"COMM"==r.name){var s=this.readIntB(e,i,2);i+=2;var a=this.readIntB(e,i,4);i+=4;for(var h=[],p=0;s>p;p++)h.push(new Float32Array(a));var b=this.readIntB(e,i,2),l=b/8;i+=2;var u=this.readFloatB(e,i);i+=10}else if("SSND"==r.name){var c=this.readIntB(e,i,4);i+=4,i+=4,i+=c;for(var p=0;s>p;p++)for(var d=h[p],f=0;a>f;f++){var m=i;m+=(f*s+p)*l;var y=this.readIntB(e,m,l),g=1<<b-1;y>=g&&(y|=~(g-1)),d[f]=y/g}i+=r.length-c-8}else i+=r.length}return t.sampleRate=u,t.bitDepth=b,t.channels=h,t.length=a,t},Gibberish.Sampler=function(){var e=1,t=Gibberish.interpolate,i=Gibberish.makePanner(),r=[0,0],n=null,o=1,s=this;if(Gibberish.extend(this,{name:"sampler",file:null,isLoaded:!1,playOnLoad:0,properties:{pitch:1,amp:1,isRecording:!1,isPlaying:!0,input:0,length:0,start:0,end:1,loops:0,pan:0},_onload:function(t){n=t.channels[0],o=t.length,s.end=o,s.length=e=o,console.log("LOADED ",s.file,o),Gibberish.audioFiles[s.file]=n,s.onload&&s.onload(),0!==s.playOnLoad&&s.note(s.playOnLoad),s.isLoaded=!0},note:function(t,i){"number"==typeof t&&(this.pitch=t),"number"==typeof i&&(this.amp=i),null!==this.function&&(this.isPlaying=!0,e=this.pitch>0?this.start:this.end)},record:function(t,i){this.isRecording=!0;var r=this;new Gibberish.Record(t,i,function(){n=this.getBuffer(),r.end=o=n.length,e=r.end,r.isRecording=!1}).record()},getBuffer:function(){return n},callback:function(o,s,a,h,p,b,l,u,c,d){var f=0;return e+=o,u>e&&e>0?(o>0?f=null!==n&&h?t(n,e):0:e>l?f=null!==n&&h?t(n,e):0:e=c?u:e,i(f,d,r)):(e=c&&o>0?l:e,e=c&&0>o?u:e,r[0]=r[1]=f,r)}}).init().oscillatorInit().processProperties(arguments),arguments[0]!==void 0&&("string"==typeof arguments[0]?(console.log("SETTING FILE"),this.file=arguments[0],delete arguments[0]):"object"==typeof arguments[0]&&arguments[0].file&&(this.file=arguments[0].file)),console.log(this),Gibberish.audioFiles[this.file]!==void 0)n=Gibberish.audioFiles[this.file],this.end=this.bufferLength=n.length,e=this.bufferLength,Gibberish.dirty(this),this.onload&&this.onload();else if(null!==this.file){var a=new AudioFileRequest(this.file);a.onSuccess=this._onload,a.send()}else this.buffer!==void 0&&(this.isLoaded=!0,n=this.buffer,this.end=this.bufferLength=n.length,e=this.bufferLength,arguments[0]&&arguments[0].loops&&(this.loops=1),Gibberish.dirty(this),this.onload&&this.onload())},Gibberish.Sampler.prototype=Gibberish._oscillator,Gibberish.MonoSynth=function(){Gibberish.extend(this,{name:"monosynth",properties:{frequency:0,amp1:1,amp2:1,amp3:1,attack:1e4,decay:1e4,cutoff:.2,resonance:2.5,filterMult:.3,isLowPass:!0,amp:.6,detune2:.01,detune3:-.01,octave2:1,octave3:-1,glide:0,pan:0,channels:1},waveform:"Saw",note:function(e,r){r!==void 0&&(this.frequency=e),i()>0&&t.run()}});var e=this.waveform;Object.defineProperty(this,"waveform",{get:function(){return e},set:function(t){e!==t&&(e=t,o=(new Gibberish[t]).callback,s=(new Gibberish[t]).callback,a=(new Gibberish[t]).callback)}});var t=new Gibberish.AD(this.attack,this.decay),i=t.getState,r=t.callback,n=(new Gibberish.Filter24).callback,o=new Gibberish[this.waveform](this.frequency,this.amp1).callback,s=new Gibberish[this.waveform](this.frequency2,this.amp2).callback,a=new Gibberish[this.waveform](this.frequency3,this.amp3).callback,h=(new Gibberish.OnePole).callback,p=Gibberish.makePanner(),b=[0,0];this.callback=function(e,t,l,u,c,d,f,m,y,g,v,G,w,k,S,x,T,A){if(2>i()){x>=1&&(x=.9999),e=h(e,1-x,x);var _=e;if(k>0)for(var F=0;k>F;F++)_*=2;else if(0>k)for(var F=0;F>k;F--)_/=2;var M=e;if(S>0)for(var F=0;S>F;F++)M*=2;else if(0>S)for(var F=0;F>S;F--)M/=2;_+=G>0?(2*e-e)*G:(e-e/2)*G,M+=w>0?(2*e-e)*w:(e-e/2)*w;var P=o(e,t,1)+s(_,l,1)+a(M,u,1),q=r(c,d),N=n(P,f+y*q,m,g,1)*q;return N*=v,b[0]=b[1]=N,1===A?b:p(N,T,b)}return b[0]=b[1]=0,b},this.init(),this.oscillatorInit(),this.processProperties(arguments)},Gibberish.MonoSynth.prototype=Gibberish._synth;var _out=[],_phase=0;Gibberish.Expressions={add:function(){var e=Array.prototype.slice.call(arguments,0),t=Array.isArray,i={name:"add",properties:{},callback:function(e,i){return t(e)?"number"==typeof i?(_out[0]=e[0]+i,_out[1]=e[1]+i,_out):(_out[0]=e[0]+i[0],_out[1]=e[1]+i[1],_out):(t(i)&&(_out[0]=e+i[0],_out[1]=e+i[1]),e+i)}};i.__proto__=new Gibberish.ugen;for(var r=0;e.length>r;r++)i.properties[r]=e[r];return i.init(),i},sub:function(){var e=Array.prototype.slice.call(arguments,0),t={name:"sub",properties:{},callback:function(e,t){return e-t}};t.__proto__=new Gibberish.ugen;for(var i=0;e.length>i;i++)t.properties[i]=e[i];return t.init(),t},mul:function(){var e=Array.prototype.slice.call(arguments,0),t={name:"mul",properties:{},callback:function(e,t){return e*t}};t.__proto__=new Gibberish.ugen;for(var i=0;e.length>i;i++)t.properties[i]=e[i];return t.init(),t},div:function(){var e=Array.prototype.slice.call(arguments,0),t={name:"div",properties:{},callback:function(e,t){return e/t}};t.__proto__=new Gibberish.ugen;for(var i=0;e.length>i;i++)t.properties[i]=e[i];return t.init(),t},abs:function(){Array.prototype.slice.call(arguments,0),Math.abs;var e={name:"abs",properties:{},callback:Math.abs};return e.__proto__=new Gibberish.ugen,e.properties[0]=arguments[0],e.init(),e},mod:function(){var e=Array.prototype.slice.call(arguments,0),t={name:"mod",properties:{},callback:function(e,t){return e%t}};t.__proto__=new Gibberish.ugen;for(var i=0;e.length>i;i++)t.properties[i]=e[i];return t.init(),t},sqrt:function(){Array.prototype.slice.call(arguments,0),_sqrt=Math.sqrt;var e={name:"sqrt",properties:{},callback:Math.sqrt};return e.__proto__=new Gibberish.ugen,e.properties[i]=arguments[0],e.init(),e},pow:function(){var e=Array.prototype.slice.call(arguments,0),t={name:"pow",properties:{},callback:Math.pow};t.__proto__=new Gibberish.ugen;for(var i=0;e.length>i;i++)t.properties[i]=e[i];return t.init(),t}},Gibberish.Sequencer=function(){Gibberish.extend(this,{target:null,key:null,values:null,valuesIndex:0,rate:null,rateIndex:0,nextTime:0,phase:0,isRunning:!1,playOnce:!1,repeatCount:0,repeatTarget:null,tick:function(){if(this.isRunning){if(this.phase===this.nextTime)return null!==this.values&&(this.target?"function"==typeof this.target[this.key]?this.target[this.key](this.values[this.valuesIndex++]):this.target[this.key]=this.values[this.valuesIndex++]:"function"==typeof this.values[this.valuesIndex]&&this.values[this.valuesIndex++](),this.valuesIndex>=this.values.length&&(this.valuesIndex=0)),this.phase=0,Array.isArray(this.rate)?(this.nextTime=this.rate[this.rateIndex++],this.rateIndex>=this.rate.length&&(this.rateIndex=0)):this.nextTime=this.rate,this.repeatTarget&&(this.repeatCount++,this.repeatCount===this.repeatTarget&&(this.isRunning=!1,this.repeatCount=0)),void 0;this.phase++}},start:function(e){return e||(this.phase=0),this.isRunning=!0,this},stop:function(){return this.isRunning=!1,this},repeat:function(e){return this.repeatTarget=e,this},disconnect:function(){var e=Gibberish.sequencers.indexOf(this);Gibberish.sequencers.splice(e,1)}});for(var e in arguments[0])this[e]=arguments[0][e];Gibberish.sequencers.push(this)},Gibberish.docs={"Gibberish.Synth":{text:'<h1 id="gibberishsynthsynth">Gibberish.Synth </h1>\n\n<p>Oscillator + attack / decay envelope.</p>\n\n<h2 id="exampleusage">Example Usage</h2>\n\n<p><code>Gibberish.init(); <br />\na = new Gibberish.Synth({ attack:44, decay:44100 }).connect(); <br />\na.note(880); <br />\na.waveform = "Triangle"; <br />\n</code>  </p>\n\n<h2 id="constructor">Constructor</h2>\n\n<p><strong>param</strong> <em>properties</em>: Object. A dictionary of property values (see below) to set for the synth on initialization.</p>\n\n<hr />',methods:{note:'<h3 id="gibberishsynthnotemethod">Gibberish.Synth.note : method</h3>\n\n<p>Generate an enveloped note at the provided frequency  </p>\n\n<p>param <strong>frequency</strong> Number. The frequency for the oscillator. <br />\nparam <strong>amp</strong> Number. Optional. The volume to use.  </p>'},properties:{frequency:'<h3 id="gibberishsynthfrequencyproperty">Gibberish.Synth.frequency : property</h3>\n\n<p>Number. The frequency for the carrier oscillator. This is normally set using the note method but can also be modulated.</p>',pulsewidth:'<h3 id="gibberishsynthpulsewidthproperty">Gibberish.Synth.pulsewidth : property</h3>\n\n<p>Number. The duty cycle for PWM synthesis</p>',attack:'<h3 id="gibberishsynthattackproperty">Gibberish.Synth.attack : property</h3>\n\n<p>Number. The length of the attack portion of the envelope in samples. Note that the synth\'s envelope affects both amplitude and the index of the synth.</p>',decay:'<h3 id="gibberishsynthdecayproperty">Gibberish.Synth.decay : property</h3>\n\n<p>Number. The length of the decay portion of the envelope in samples. Note that the synth\'s envelope affects both amplitude and the index of the synth.</p>',glide:'<h3 id="gibberishsynthglideproperty">Gibberish.Synth.glide : property</h3>\n\n<p>Number. The synth has a one-pole filter attached to the carrier frequency. Set glide to a value between .999 and 1 to get pitch sweep between notes.</p>',amp:'<h3 id="gibberishsynthampproperty">Gibberish.Synth.amp : property</h3>\n\n<p>Number. The relative amplitude level of the synth.</p>',channels:'<h3 id="gibberishsynthchannelsproperty">Gibberish.Synth.channels : property</h3>\n\n<p>Number. Default 2. Mono or Stereo synthesis.</p>',pan:'<h3 id="gibberishsynthpanproperty">Gibberish.Synth.pan : property</h3>\n\n<p>Number. Default 0. If the synth has two channels, this determines its position in the stereo spectrum.</p>',waveform:"<h3 id=\"gibberishsynthwaveformproperty\">Gibberish.Synth.waveform : property</h3>\n\n<p>String. The type of waveform to use. Options include 'Sine', 'Triangle', 'PWM', 'Saw' etc.</p>"},type:" Synth"},"Gibberish.PolySynth":{text:'<h1 id="gibberishpolysynthsynth">Gibberish.PolySynth </h1>\n\n<p>A polyphonic version of <a href="javascript:displayDocs(\'Gibberish.Synth\')">Synth</a>. There are two additional properties for the polyphonic version of the synth. The polyphonic version consists of multiple Synths being fed into a single <a href="javascript:displayDocs(\'Gibberish.Bus\')">Bus</a> object.</p>\n\n<h2 id="exampleusage">Example Usage</h2>\n\n<p><code>Gibberish.init(); <br />\na = new Gibberish.PolySytn({ attack:88200, decay:88200, maxVoices:10 }).connect(); <br />\na.note(880); <br />\na.note(1320); \na.note(1760); <br />\n</code>  </p>\n\n<h2 id="constructor">Constructor</h2>\n\n<p>One important property to pass to the constructor is the maxVoices property, which defaults to 5. This controls how many voices are allocated to the synth and cannot be changed after initialization.  </p>\n\n<p><strong>param</strong> <em>properties</em>: Object. A dictionary of property values (see below) to set for the synth on initialization.</p>\n\n<hr />',methods:{note:'<h3 id="gibberishpolysynthnotemethod">Gibberish.PolySynth.note : method</h3>\n\n<p>Generate an enveloped note at the provided frequency using a simple voice allocation system where if all children are active, the one active the longest cancels its current note and begins playing a new one.    </p>\n\n<p>param <strong>frequency</strong> Number. The frequency for the oscillator. \nparam <strong>amp</strong> Number. Optional. The volume to use.  </p>'},properties:{children:'<h3 id="gibberishpolysynthchildrenproperty">Gibberish.PolySynth.children : property</h3>\n\n<p>Array. Read-only. An array holding all of the child FMSynth objects.</p>',maxVoices:'<h3 id="gibberishpolysynthmaxvoicesproperty">Gibberish.PolySynth.maxVoices : property</h3>\n\n<p>Number. The number of voices of polyphony the synth has. May only be set in initialization properties passed to constrcutor.</p>'},type:" Synth"},"Gibberish.Synth2":{text:'<h1 id="gibberishsynth2synth">Gibberish.Synth2 </h1>\n\n<p>Oscillator + attack / decay envelope + 24db ladder filter. Basically the same as the <a href="javascript:displayDocs(\'Gibberish.Synth\')">Synth</a> object but with the addition of the filter. Note that the envelope controls both the amplitude of the oscillator and the cutoff frequency of the filter.</p>\n\n<h2 id="exampleusage">Example Usage</h2>\n\n<p><code>Gibberish.init(); <br />\na = new Gibberish.Synth2({ attack:44, decay:44100, cutoff:.2, resonance:4 }).connect(); <br />\na.note(880); <br />\n</code>  </p>\n\n<h2 id="constructor">Constructor</h2>\n\n<p><strong>param</strong> <em>properties</em>: Object. A dictionary of property values (see below) to set for the synth on initialization.</p>\n\n<hr />',methods:{note:'<h3 id="gibberishsynth2notemethod">Gibberish.Synth2.note : method</h3>\n\n<p>Generate an enveloped note at the provided frequency  </p>\n\n<p>param <strong>frequency</strong> Number. The frequency for the oscillator. <br />\nparam <strong>amp</strong> Number. Optional. The volume to use.  </p>'},properties:{frequency:'<h3 id="gibberishsynth2frequencyproperty">Gibberish.Synth2.frequency : property</h3>\n\n<p>Number. The frequency for the carrier oscillator. This is normally set using the note method but can also be modulated.</p>',pulsewidth:'<h3 id="gibberishsynth2pulsewidthproperty">Gibberish.Synth2.pulsewidth : property</h3>\n\n<p>Number. The duty cycle for PWM synthesis</p>',attack:'<h3 id="gibberishsynth2attackproperty">Gibberish.Synth2.attack : property</h3>\n\n<p>Number. The length of the attack portion of the envelope in samples. Note that the synth\'s envelope affects both amplitude and the index of the synth.</p>',decay:'<h3 id="gibberishsynth2decayproperty">Gibberish.Synth2.decay : property</h3>\n\n<p>Number. The length of the decay portion of the envelope in samples. Note that the synth\'s envelope affects both amplitude and the index of the synth.</p>',cutoff:'<h3 id="gibberishsynth2cutoffproperty">Gibberish.Synth2.cutoff : property</h3>\n\n<p>Number. 0..1. The cutoff frequency for the synth\'s filter.</p>',resonance:'<h3 id="gibberishsynth2resonanceproperty">Gibberish.Synth2.resonance : property</h3>\n\n<p>Number. 0..50. Values above 4.5 are likely to produce shrieking feedback. You are warned.</p>',useLowPassFilter:'<h3 id="gibberishsynth2uselowpassfilterproperty">Gibberish.Synth2.useLowPassFilter : property</h3>\n\n<p>Boolean. Default true. Whether to use a high-pass or low-pass filter.</p>',glide:'<h3 id="gibberishsynth2glideproperty">Gibberish.Synth2.glide : property</h3>\n\n<p>Number. The synth has a one-pole filter attached to the carrier frequency. Set glide to a value between .999 and 1 to get pitch sweep between notes.</p>',amp:'<h3 id="gibberishsynth2ampproperty">Gibberish.Synth2.amp : property</h3>\n\n<p>Number. The relative amplitude level of the synth.</p>',channels:'<h3 id="gibberishsynth2channelsproperty">Gibberish.Synth2.channels : property</h3>\n\n<p>Number. Default 2. Mono or Stereo synthesis.</p>',pan:'<h3 id="gibberishsynth2panproperty">Gibberish.Synth2.pan : property</h3>\n\n<p>Number. Default 0. If the synth has two channels, this determines its position in the stereo spectrum.</p>',waveform:"<h3 id=\"gibberishsynth2waveformproperty\">Gibberish.Synth2.waveform : property</h3>\n\n<p>String. The type of waveform to use. Options include 'Sine', 'Triangle', 'PWM', 'Saw' etc.</p>"},type:" Synth"},"Gibberish.FMSynth":{text:'<h1 id="gibberishfmsynthsynth">Gibberish.FMSynth </h1>\n\n<p>Classic 2-op FM synthesis with an attached attack / decay envelope.</p>\n\n<h2 id="exampleusage">Example Usage</h2>\n\n<p><code>Gibberish.init(); <br />\na = new Gibberish.FMSynth({ cmRatio:5, index:3 }).connect();\na.note(880);</code>  </p>\n\n<h2 id="constructor">Constructor</h2>\n\n<p><strong>param</strong> <em>properties</em>: Object. A dictionary of property values (see below) to set for the synth on initialization.</p>\n\n<hr />',methods:{note:'<h3 id="gibberishfmsynthnotemethod">Gibberish.FMSynth.note : method</h3>\n\n<p>Generate an enveloped note at the provided frequency  </p>\n\n<p>param <strong>frequency</strong> Number. The frequency for the carrier oscillator. The modulator frequency will be calculated automatically from this value in conjunction with the synth\'s <br />\nparam <strong>amp</strong> Number. Optional. The volume to use.  </p>'},properties:{frequency:'<h3 id="gibberishfmsynthfrequencyproperty">Gibberish.FMSynth.frequency : property</h3>\n\n<p>Number. The frequency for the carrier oscillator. This is normally set using the note method but can also be modulated.</p>',cmRatio:'<h3 id="gibberishfmsynthcmratioproperty">Gibberish.FMSynth.cmRatio : property</h3>\n\n<p>Number. The carrier-to-modulation ratio. A cmRatio of 2 means that the carrier frequency will be twice the frequency of the modulator.</p>',attack:'<h3 id="gibberishfmsynthattackproperty">Gibberish.FMSynth.attack : property</h3>\n\n<p>Number. The length of the attack portion of the envelope in samples. Note that the synth\'s envelope affects both amplitude and the index of the synth.</p>',decay:'<h3 id="gibberishfmsynthdecayproperty">Gibberish.FMSynth.decay : property</h3>\n\n<p>Number. The length of the decay portion of the envelope in samples. Note that the synth\'s envelope affects both amplitude and the index of the synth.</p>',glide:'<h3 id="gibberishfmsynthglideproperty">Gibberish.FMSynth.glide : property</h3>\n\n<p>Number. The synth has a one-pole filter attached to the carrier frequency. Set glide to a value between .999 and 1 to get pitch sweep between notes.</p>',amp:'<h3 id="gibberishfmsynthampproperty">Gibberish.FMSynth.amp : property</h3>\n\n<p>Number. The relative amplitude level of the synth.</p>',channels:'<h3 id="gibberishfmsynthchannelsproperty">Gibberish.FMSynth.channels : property</h3>\n\n<p>Number. Default 2. Mono or Stereo synthesis.</p>',pan:'<h3 id="gibberishfmsynthpanproperty">Gibberish.FMSynth.pan : property</h3>\n\n<p>Number. Default 0. If the synth has two channels, this determines its position in the stereo spectrum.</p>'},type:" Synth"},"Gibberish.PolyFM":{text:'<h1 id="gibberishpolyfmsynth">Gibberish.PolyFM </h1>\n\n<p>A polyphonic version of <a href="javascript:displayDocs(\'Gibberish.FMSynth\')">FMSynth</a>. There are two additional properties for the polyphonic version of the synth. The polyphonic version consists of multiple FMSynths being fed into a single <a href="javascript:displayDocs(\'Gibberish.Bus\')">Bus</a> object.</p>\n\n<h2 id="exampleusage">Example Usage</h2>\n\n<p><code>Gibberish.init(); <br />\na = new Gibberish.PolyFM({ cmRatio:5, index:3, attack:88200, decay:88200 }).connect(); <br />\na.note(880); <br />\na.note(1320); <br />\n</code>  </p>\n\n<h2 id="constructor">Constructor</h2>\n\n<p>One important property to pass to the constructor is the maxVoices property, which defaults to 5. This controls how many voices are allocated to the synth and cannot be changed after initialization.  </p>\n\n<p><strong>param</strong> <em>properties</em>: Object. A dictionary of property values (see below) to set for the synth on initialization.</p>\n\n<hr />',methods:{note:'<h3 id="gibberishpolyfmnotemethod">Gibberish.PolyFM.note : method</h3>\n\n<p>Generate an enveloped note at the provided frequency using a simple voice allocation system where if all children are active, the one active the longest cancels its current note and begins playing a new one.    </p>\n\n<p>param <strong>frequency</strong> Number. The frequency for the carrier oscillator. The modulator frequency will be calculated automatically from this value in conjunction with the synth\'s <br />\nparam <strong>amp</strong> Number. Optional. The volume to use.  </p>'},properties:{children:'<h3 id="gibberishpolyfmchildrenproperty">Gibberish.PolyFM.children : property</h3>\n\n<p>Array. Read-only. An array holding all of the child FMSynth objects.</p>',maxVoices:'<h3 id="gibberishpolyfmmaxvoicesproperty">Gibberish.PolyFM.maxVoices : property</h3>\n\n<p>Number. The number of voices of polyphony the synth has. May only be set in initialization properties passed to constrcutor.</p>'},type:" Synth"},"Gibberish.Mono":{text:'<h1 id="gibberishmonosynth">Gibberish.Mono </h1>\n\n<p>A three oscillator monosynth for bass and lead lines. You can set the octave and tuning offsets for oscillators 2 &amp; 3. There is a 24db filter and an envelope controlling\nboth the amplitude and filter cutoff.</p>\n\n<h2 id="exampleusage">Example Usage</h2>\n\n<p><code>\nt = new Gibberish.Mono({ <br />\n    cutoff:0, <br />\n    filterMult:.5, <br />\n    attack:_8, <br />\n    decay:_8, <br />\n    octave2:-1, <br />\n    octave3:-1, <br />\n    detune2:.01, <br />\n    glide:_12, <br />\n}).connect(); <br />\nt.note("C3");</code></p>\n\n<h2 id="constructors">Constructors</h2>\n\n<p>param <strong>arguments</strong> : Object. A dictionary of property values to set upon initialization. See the properties section and the example usage section for details.</p>',methods:{note:'<h3 id="gibberishmononotemethod">Gibberish.Mono.note : method</h3>\n\n<p>param <strong>note or frequency</strong> : String or Integer. You can pass a note name, such as "A#4", or a frequency value, such as 440.\nparam <strong>amp</strong> : Optional. Float. The volume of the note, usually between 0..1. The main amp property of the Synth will also affect note amplitude.</p>'},properties:{waveform:"<h3 id=\"gibberishmonowaveformproperty\">Gibberish.Mono.waveform : property</h3>\n\n<p>String. The primary oscillator to be used. Can currently be 'Sine', 'Square', 'Noise', 'Triangle' or 'Saw'. </p>",attack:'<h3 id="gibberishmonoattackproperty">Gibberish.Mono.attack : property</h3>\n\n<p>Integer. The length, in samples, of the attack of the amplitude envelope.</p>',decay:'<h3 id="gibberishmonodecayproperty">Gibberish.Mono.decay : property</h3>\n\n<p>Integer. The length, in samples, of the decay of the amplitude envelope.</p>',amp:'<h3 id="gibberishmonoampproperty">Gibberish.Mono.amp : property</h3>\n\n<p>Float. The peak amplitude of the synth, usually between 0..1</p>',cutoff:'<h3 id="gibberishmonocutoffproperty">Gibberish.Mono.cutoff : property</h3>\n\n<p>Float. The frequency cutoff for the synth\'s filter. Range is 0..1.</p>',filterMult:'<h3 id="gibberishmonofiltermultproperty">Gibberish.Mono.filterMult : property</h3>\n\n<p>Float. As the envelope on the synth progress, the filter cutoff will also change by this amount * the envelope amount.</p>',resonance:'<h3 id="gibberishmonoresonanceproperty">Gibberish.Mono.resonance : property</h3>\n\n<p>Float. The emphasis placed on the filters cutoff frequency. 0..50, however, GOING OVER 5 IS DANGEROUS TO YOUR EARS (ok, maybe 6 is all right...)</p>',octave2:'<h3 id="gibberishmonooctave2property">Gibberish.Mono.octave2 : property</h3>\n\n<p>Integer. The octave difference between oscillator 1 and oscillator 2. Can be positive (higher osc2) or negative (lower osc 2) or 0 (same octave).</p>',detune2:'<h3 id="gibberishmonodetune2property">Gibberish.Mono.detune2 : property</h3>\n\n<p>Float. The amount, from -1..1, the oscillator 2 is detuned. A value of -.5 means osc2 is half an octave lower than osc1. A value of .01 means osc2 is .01 octaves higher than osc1.</p>',octave3:'<h3 id="gibberishmonooctave3property">Gibberish.Mono.octave3 : property</h3>\n\n<p>Integer. The octave difference between oscillator 1 and oscillator 3. Can be positive (higher osc3) or negative (lower osc 3) or 0 (same octave).</p>',detune3:'<h3 id="gibberishmonodetune3property">Gibberish.Mono.detune3 : property</h3>\n\n<p>Float. The amount, from -1..1, the oscillator 3 is detuned. A value of -.5 means osc3 is half an octave lower than osc1. A value of .01 means osc3 is .01 octaves higher than osc1.</p>',glide:'<h3 id="gibberishmonoglideproperty">Gibberish.Mono.glide : property</h3>\n\n<p>Integer. The length in time, in samples, to slide in pitch from one note to the next.</p>'},type:" Synth"},"Gibberish.Distortion":{text:'<h1 id="gibberishdistortionfx">Gibberish.Distortion </h1>\n\n<p>A simple waveshaping distortion that adaptively scales its gain based on the amount of distortion applied.</p>\n\n<h2 id="exampleusage">Example Usage</h2>\n\n<p><code>a = new Gibberish.Synth({ attack:44, decay:44100 }); <br />\nb = new Gibberish.Distortion({ input:a, amount:30 }).connect(); <br />\na.note(440); <br />\n</code>  </p>\n\n<h2 id="constructor">Constructor</h2>\n\n<p><strong>param</strong> <em>properties</em>: Object. A dictionary of property values (see below) to set for the synth on initialization.</p>\n\n<hr />',methods:{},properties:{amount:'<h3 id="gibberishdistortionamountproperty">Gibberish.Distortion.amount : property</h3>\n\n<p>Number. The amount of distortion to apply. This number cannot be set lower than 2.</p>'},type:" FX"},"Gibberish.Delay":{text:'<h1 id="gibberishdelayfx">Gibberish.Delay </h1>\n\n<p>A simple echo effect.</p>\n\n<h2 id="exampleusage">Example Usage</h2>\n\n<p><code>a = new Gibberish.Synth({ attack:44, decay:44100 }); <br />\nb = new Gibberish.Delay({ input:a, time:22050, feedback:.35 }).connect(); <br />\na.note(440); <br />\n</code>  </p>\n\n<h2 id="constructor">Constructor</h2>\n\n<p><strong>param</strong> <em>properties</em>: Object. A dictionary of property values (see below) to set for the synth on initialization.</p>\n\n<hr />',methods:{},properties:{time:'<h3 id="gibberishdelaytimeproperty">Gibberish.Delay.time : property</h3>\n\n<p>Number. The delay time as measured in samples</p>',feedback:'<h3 id="gibberishdelayfeedbackproperty">Gibberish.Delay.feedback : property</h3>\n\n<p>Number. The amount of feedback that the delay puts into its buffers.</p>'},type:" FX"},"Gibberish.Decimator":{text:'<h1 id="gibberishdecimatorfx">Gibberish.Decimator </h1>\n\n<p>A bit-crusher / sample rate reducer. Adapted from code / comments at http://musicdsp.org/showArchiveComment.php?ArchiveID=124</p>\n\n<h2 id="exampleusage">Example Usage</h2>\n\n<p><code>a = new Gibberish.Synth({ attack:44, decay:44100 }); <br />\nb = new Gibberish.Decimator({ input:a, bitDepth:4.2, sampleRate:.33 }).connect(); <br />\na.note(440); <br />\n</code>  </p>\n\n<h2 id="constructor">Constructor</h2>\n\n<p><strong>param</strong> <em>properties</em>: Object. A dictionary of property values (see below) to set for the synth on initialization.</p>\n\n<hr />',methods:{},properties:{bitDepth:'<h3 id="gibberishdecimatorbitdepthproperty">Gibberish.Decimator.bitDepth : property</h3>\n\n<p>Float. 0..16. The number of bits the signal is truncated to. May be a floating point number.</p>',sampleRate:'<h3 id="gibberishdecimatorsamplerateproperty">Gibberish.Decimator.sampleRate : property</h3>\n\n<p>Number. 0..1. The sample rate to use where 0 is 0 Hz and 1 is nyquist.</p>'},type:" FX"},"Gibberish.RingModulation":{text:'<h1 id="gibberishringmodulationfx">Gibberish.RingModulation </h1>\n\n<p>The name says it all. This ugen also has a mix property to control the ratio of wet to dry output.</p>\n\n<h2 id="exampleusage">Example Usage</h2>\n\n<p><code>a = new Gibberish.Synth({ attack:44, decay:44100 }); <br />\nb = new Gibberish.RingModulation({ input:a, frequency:1000, amp:.4, mix:1 }).connect(); <br />\na.note(440); <br />\n</code>  </p>\n\n<h2 id="constructor">Constructor</h2>\n\n<p><strong>param</strong> <em>properties</em>: Object. A dictionary of property values (see below) to set for the synth on initialization.</p>\n\n<hr />',methods:{},properties:{frequency:'<h3 id="gibberishringmodulationfrequencyproperty">Gibberish.RingModulation.frequency : property</h3>\n\n<p>Float. The frequency of the ring modulation modulator wave.</p>',amp:'<h3 id="gibberishringmodulationampproperty">Gibberish.RingModulation.amp : property</h3>\n\n<p>Float. The amplitude of the ring modulation modulator wave.</p>',mix:'<h3 id="gibberishringmodulationmixproperty">Gibberish.RingModulation.mix : property</h3>\n\n<p>Float. 0..1. The wet/dry output ratio. A value of 1 means a completely wet signal, a value of 0 means completely dry.</p>'},type:" FX"},"Gibberish.OnePole":{text:'<h1 id="gibberishonepolefx">Gibberish.OnePole </h1>\n\n<p>A one-pole filter for smoothing property values. This is particularly useful when the properties are being controlled interactively. You use the smooth method to apply the filter.</p>\n\n<h2 id="exampleusage">Example Usage</h2>\n\n<p><code>a = new Gibberish.Synth({ attack:44, decay:44100 }).connect(); <br />\nb = new Gibberish.OnePole({input:a.properties.frequency, a0:.0001, b1:.9999}); <br />\nb.smooth(\'frequency\', a); <br />\na.note(880); <br />\na.note(440); <br />\n</code>  </p>\n\n<h2 id="constructor">Constructor</h2>\n\n<p><strong>param</strong> <em>properties</em>: Object. A dictionary of property values (see below) to set for the synth on initialization.</p>\n\n<hr />',methods:{smooth:'<h3 id="gibberishonepolesmoothmethod">Gibberish.OnePole.smooth : method</h3>\n\n<p>Use this to apply the filter to a property of an object.</p>\n\n<p>param <strong>propertyName</strong> String. The name of the property to smooth. <br />\nparam <strong>object</strong> Object. The object containing the property to be smoothed</p>'},properties:{input:'<h3 id="gibberishonepoleinputproperty">Gibberish.OnePole.input : property</h3>\n\n<p>Float. The property to smooth. You should always refer to this property through the properties dictionary of the ugen. In general it is much easier to use the smooth method of the OnePole than to set this property manually.</p>',a0:'<h3 id="gibberishonepolea0property">Gibberish.OnePole.a0 : property</h3>\n\n<p>Float. The value the input is multiplied by.</p>',b1:'<h3 id="gibberishonepoleb1property">Gibberish.OnePole.b1 : property</h3>\n\n<p>Float. The value this pole of the filter is multiplied by.</p>'},type:" FX"},"Gibberish.Filter24":{text:'<h1 id="gibberishfilter24fx">Gibberish.Filter24 </h1>\n\n<p>A four pole ladder filter. Adapted from Arif Ove Karlsne\'s 24dB ladder approximation: http://musicdsp.org/showArchiveComment.php?ArchiveID=141.</p>\n\n<h2 id="exampleusage">Example Usage</h2>\n\n<p><code>a = new Gibberish.Synth({ attack:44, decay:44100 }); <br />\nb = new Gibberish.Filter24({input:a, cutoff:.2, resonance:4}).connect(); <br />\na.note(1760); <br />\na.note(440); <br />\na.isLowPass = false; <br />\na.note(220); <br />\na.note(1760); <br />\n</code>  </p>\n\n<h2 id="constructor">Constructor</h2>\n\n<p><strong>param</strong> <em>properties</em>: Object. A dictionary of property values (see below) to set for the synth on initialization.</p>\n\n<hr />',methods:{},properties:{input:'<h3 id="gibberishfilter24inputproperty">Gibberish.Filter24.input : property</h3>\n\n<p>Object. The ugen that should feed the filter.</p>',cutoff:'<h3 id="gibberishfilter24cutoffproperty">Gibberish.Filter24.cutoff : property</h3>\n\n<p>Number. 0..1. The cutoff frequency for the synth\'s filter.</p>',resonance:'<h3 id="gibberishfilter24resonanceproperty">Gibberish.Filter24.resonance : property</h3>\n\n<p>Number. 0..50. Values above 4.5 are likely to produce shrieking feedback. You are warned.</p>',isLowPass:'<h3 id="gibberishfilter24islowpassproperty">Gibberish.Filter24.isLowPass : property</h3>\n\n<p>Boolean. Default true. Whether to use a low-pass or high-pass filter.</p>'},type:" FX"},"Gibberish.SVF":{text:'<h1 id="gibberishsvffx">Gibberish.SVF </h1>\n\n<p>A two-pole state variable filter. This filter calculates coefficients on a per-sample basis, so that you can easily modulate cutoff and Q. Can switch between low-pass, high-pass, band and notch modes.</p>\n\n<h2 id="exampleusage">Example Usage</h2>\n\n<p><code>a = new Gibberish.Synth({ attack:44, decay:44100 }); <br />\nb = new Gibberish.SVF({input:a, cutoff:200, Q:4, mode:0}); <br />\na.note(1760); <br />\na.note(440); <br />\na.mode = 2;\na.note(220); <br />\na.note(1760); <br />\n</code>  </p>\n\n<h2 id="constructor">Constructor</h2>\n\n<p><strong>param</strong> <em>properties</em>: Object. A dictionary of property values (see below) to set for the synth on initialization.</p>\n\n<hr />',methods:{},properties:{input:'<h3 id="gibberishsvfinputproperty">Gibberish.SVF.input : property</h3>\n\n<p>Object. The ugen that should feed the filter.</p>',cutoff:'<h3 id="gibberishsvfcutoffproperty">Gibberish.SVF.cutoff : property</h3>\n\n<p>Number. 0..22050. The cutoff frequency for the synth\'s filter. Note that unlike the Filter24, this is measured in Hz.</p>',resonance:'<h3 id="gibberishsvfresonanceproperty">Gibberish.SVF.resonance : property</h3>\n\n<p>Number. 0..50. Values above 4.5 are likely to produce shrieking feedback. You are warned.</p>',mode:'<h3 id="gibberishsvfmodeproperty">Gibberish.SVF.mode : property</h3>\n\n<p>Number. 0..3. 0 = lowpass, 1 = highpass, 2 = bandpass, 3 = notch.</p>'},type:" FX"},"Gibberish.Biquad":{text:'<h1 id="gibberishbiquadfx">Gibberish.Biquad </h1>\n\n<p>A two-pole biquad filter. Currently, you must manually call calculateCoefficients every time mode, cutoff or Q changes; thus this filter isn\'t good for samplerate modulation.</p>\n\n<h2 id="exampleusage">Example Usage</h2>\n\n<p><code>a = new Gibberish.Synth({ attack:44, decay:44100 }); <br />\nb = new Gibberish.Biquad({input:a, cutoff:200, Q:4, mode:"LP"}).connect(); <br />\na.note(1760); <br />\na.note(440); <br />\na.mode = "HP";\na.note(220); <br />\na.note(1760); <br />\n</code>  </p>\n\n<h2 id="constructor">Constructor</h2>\n\n<p><strong>param</strong> <em>properties</em>: Object. A dictionary of property values (see below) to set for the synth on initialization.</p>\n\n<hr />',methods:{},properties:{input:'<h3 id="gibberishbiquadinputproperty">Gibberish.Biquad.input : property</h3>\n\n<p>Object. The ugen that should feed the filter.</p>',cutoff:'<h3 id="gibberishbiquadcutoffproperty">Gibberish.Biquad.cutoff : property</h3>\n\n<p>Number. 0..22050. The cutoff frequency for the synth\'s filter. Note that unlike the Filter24, this is measured in Hz.</p>',Q:'<h3 id="gibberishbiquadqproperty">Gibberish.Biquad.Q : property</h3>\n\n<p>Number. 0..50. Values above 4.5 are likely to produce shrieking feedback. You are warned.</p>',mode:'<h3 id="gibberishbiquadmodeproperty">Gibberish.Biquad.mode : property</h3>\n\n<p>Number. 0..3. "LP" = lowpass, "HP" = highpass, "BP" = bandpass</p>'},type:" FX"},"Gibberish.Flanger":{text:'<h1 id="gibberishflangerfx">Gibberish.Flanger </h1>\n\n<p>Classic flanging effect with feedback.</p>\n\n<h2 id="exampleusage">Example Usage</h2>\n\n<p><code>a = new Gibberish.Synth({ attack:44, decay:44100 }); <br />\nb = new Gibberish.Flanger({input:a, rate:.5, amount:125, feedback:.5}).connect(); <br />\na.note(440); <br />\na.feedback = 0; <br />\na.note(440); <br />\na.rate = 4;\na.note(440);\n</code>  </p>\n\n<h2 id="constructor">Constructor</h2>\n\n<p><strong>param</strong> <em>properties</em>: Object. A dictionary of property values (see below) to set for the synth on initialization.</p>\n\n<hr />',methods:{},properties:{input:'<h3 id="gibberishflangerinputproperty">Gibberish.Flanger.input : property</h3>\n\n<p>Object. The ugen that should feed the flagner.</p>',rate:'<h3 id="gibberishflangerrateproperty">Gibberish.Flanger.rate : property</h3>\n\n<p>Number. The speed at which the delay line tap position is modulated.</p>',amount:'<h3 id="gibberishflangeramountproperty">Gibberish.Flanger.amount : property</h3>\n\n<p>Number. The amount of time, in samples, that the delay line tap position varies by.</p>',feedback:'<h3 id="gibberishflangerfeedbackproperty">Gibberish.Flanger.feedback : property</h3>\n\n<p>Number. The amount of output that should be fed back into the delay line</p>',offset:'<h3 id="gibberishflangeroffsetproperty">Gibberish.Flanger.offset : property</h3>\n\n<p>Number. The base offset of the delay line tap from the current time. Large values (> 500) lead to chorusing effects.</p>'},type:" FX"},"Gibberish.Vibrato":{text:'<h1 id="gibberishvibratofx">Gibberish.Vibrato </h1>\n\n<p>Delay line vibrato effect.</p>\n\n<h2 id="exampleusage">Example Usage</h2>\n\n<p><code>a = new Gibberish.Synth({ attack:44, decay:44100 }); <br />\nb = new Gibberish.Vibrato({input:a, rate:4, amount:125 }).connect(); <br />\na.note(440); <br />\na.rate = .5;\na.note(440);\n</code>  </p>\n\n<h2 id="constructor">Constructor</h2>\n\n<p><strong>param</strong> <em>properties</em>: Object. A dictionary of property values (see below) to set for the synth on initialization.</p>\n\n<hr />',methods:{},properties:{input:'<h3 id="gibberishvibratoinputproperty">Gibberish.Vibrato.input : property</h3>\n\n<p>Object. The ugen that should feed the vibrato.</p>',rate:'<h3 id="gibberishvibratorateproperty">Gibberish.Vibrato.rate : property</h3>\n\n<p>Number. The speed at which the delay line tap position is modulated.</p>',amount:'<h3 id="gibberishvibratoamountproperty">Gibberish.Vibrato.amount : property</h3>\n\n<p>Number. The size of the delay line modulation; effectively the amount of vibrato to produce, </p>',offset:'<h3 id="gibberishvibratooffsetproperty">Gibberish.Vibrato.offset : property</h3>\n\n<p>Number. The base offset of the delay line tap from the current time.</p>'},type:" FX"},"Gibberish.BufferShuffler":{text:'<h1 id="gibberishbuffershufflerfx">Gibberish.BufferShuffler </h1>\n\n<p>A buffer shuffling / stuttering effect with reversing and pitch-shifting</p>\n\n<h2 id="exampleusage">Example Usage</h2>\n\n<p><code>a = new Gibberish.Synth({ attack:88200, decay:88200 }); <br />\nb = new Gibberish.BufferShuffler({input:a, chance:.25, amount:125, rate:44100, pitchMin:-4, pitchMax:4 }).connect(); <br />\na.note(440);\n</code>  </p>\n\n<h2 id="constructor">Constructor</h2>\n\n<p><strong>param</strong> <em>properties</em> : Object. A dictionary of property keys and values to assign to the Gibberish.BufferShuffler object</p>\n\n<hr />',methods:{},properties:{chance:'<h3 id="gibberishbuffershufflerchanceproperty">Gibberish.BufferShuffler.chance : property</h3>\n\n<p>Float. Range 0..1. Default .25. The likelihood that incoming audio will be shuffled.</p>',rate:'<h3 id="gibberishbuffershufflerrateproperty">Gibberish.BufferShuffler.rate : property</h3>\n\n<p>Integer, in samples. Default 11025. How often Gibberish.BufferShuffler will randomly decide whether or not to shuffle.</p>',length:'<h3 id="gibberishbuffershufflerlengthproperty">Gibberish.BufferShuffler.length : property</h3>\n\n<p>Integer, in samples. Default 22050. The length of time to play stuttered audio when stuttering occurs.</p>',reverseChance:'<h3 id="gibberishbuffershufflerreversechanceproperty">Gibberish.BufferShuffler.reverseChance : property</h3>\n\n<p>Float. Range 0..1. Default .5. The likelihood that stuttered audio will be reversed</p>',pitchChance:'<h3 id="gibberishbuffershufflerpitchchanceproperty">Gibberish.BufferShuffler.pitchChance : property</h3>\n\n<p>Float. Range 0..1. Default .5. The likelihood that stuttered audio will be repitched.</p>',pitchMin:'<h3 id="gibberishbuffershufflerpitchminproperty">Gibberish.BufferShuffler.pitchMin : property</h3>\n\n<p>Float. Range 0..1. Default .25. The lowest playback speed used to repitch the audio</p>',pitchMax:'<h3 id="gibberishbuffershufflerpitchmaxproperty">Gibberish.BufferShuffler.pitchMax : property</h3>\n\n<p>Float. Range 0..1. Default 2. The highest playback speed used to repitch the audio.</p>',wet:'<h3 id="gibberishbuffershufflerwetproperty">Gibberish.BufferShuffler.wet : property</h3>\n\n<p>Float. Range 0..1. Default 1. When shuffling, the amplitude of the wet signal</p>',dry:'<h3 id="gibberishbuffershufflerdryproperty">Gibberish.BufferShuffler.dry : property</h3>\n\n<p>Float. Range 0..1. Default 0. When shuffling, the amplitude of the dry signal</p>'},type:" FX"},"Gibberish.Reverb":{text:'<h1 id="gibberishreverbfx">Gibberish.Reverb </h1>\n\n<p>based off audiolib.js reverb and freeverb</p>\n\n<h2 id="exampleusage">Example Usage</h2>\n\n<p><code>a = new Gibberish.Synth({ attack:88200, decay:88200 }); <br />\nb = new Gibberish.Reverb({input:a, roomSize:.5, wet:1, dry;.25}).connect();\na.note(440);\n</code>  </p>\n\n<h2 id="constructor">Constructor</h2>\n\n<p><strong>param</strong> <em>properties</em> : Object. A dictionary of property keys and values to assign to the Gibberish.BufferShuffler object</p>',methods:{},properties:{roomSize:'<h3 id="gibberishreverbroomsizeproperty">Gibberish.Reverb.roomSize : property</h3>\n\n<p>Float. 0..1. The size of the room being emulated.</p>',damping:'<h3 id="gibberishreverbdampingproperty">Gibberish.Reverb.damping : property</h3>\n\n<p>Float. Attenuation of high frequencies that occurs.</p>',wet:'<h3 id="gibberishreverbwetproperty">Gibberish.Reverb.wet : property</h3>\n\n<p>Float. Default = .75. The amount of processed signal that is output.  </p>',dry:'<h3 id="gibberishreverbdryproperty">Gibberish.Reverb.dry : property</h3>\n\n<p>Float. Default = .5. The amount of dry signal that is output</p>'},type:" FX"},"Gibberish.Granulator":{text:"<h1 id=\"gibberishgranulatorfx\">Gibberish.Granulator </h1>\n\n<p>A granulator that operates on a buffer of samples. You can get the samples from a <a href=\"javascript:displayDocs('Gibberish.Sampler')\">Sampler</a>\nobject.</p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>a = new Gibberish.Sampler('resources/trumpet.wav'); <br />\n// wait until sample is loaded to create granulator <br />\na.onload = function() { <br />\n  b = new Gibberish.Granulator({ <br />\n    buffer:a.getBuffer(), <br />\n    grainSize:1000, <br />\n    speedMin: -2, <br />\n    speedMax: 2, <br />\n  }); <br />\n  b.mod('position', new Gibberish.Sine(.1, .45), '+'); <br />\n  b.connect(); <br />\n};</code></p>\n\n<h2 id=\"constructor\">Constructor</h2>\n\n<p><strong>param</strong> <em>propertiesList</em>: Object. At a minimum you should define the input to granulate. See the example.</p>",methods:{},properties:{speed:'<h3 id="gibberishgranulatorspeedproperty">Gibberish.Granulator.speed : property</h3>\n\n<p>Float. The playback rate, in samples, of each grain</p>',speedMin:'<h3 id="gibberishgranulatorspeedminproperty">Gibberish.Granulator.speedMin : property</h3>\n\n<p>Float. When set, the playback rate will vary on a per grain basis from (grain.speed + grain.speedMin) -> (grain.speed + grain.speedMax). This value should almost always be negative.</p>',speedMax:'<h3 id="gibberishgranulatorspeedmaxproperty">Gibberish.Granulator.speedMax : property</h3>\n\n<p>Float. When set, the playback rate will vary on a per grain basis from (grain.speed + grain.speedMin) -> (grain.speed + grain.speedMax).</p>',grainSize:'<h3 id="gibberishgranulatorgrainsizeproperty">Gibberish.Granulator.grainSize : property</h3>\n\n<p>Integer. The length, in samples, of each grain</p>',position:'<h3 id="gibberishgranulatorpositionproperty">Gibberish.Granulator.position : property</h3>\n\n<p>Float. The center position of the grain cloud. 0 represents the start of the buffer, 1 represents the end.</p>',positionMin:'<h3 id="gibberishgranulatorpositionminproperty">Gibberish.Granulator.positionMin : property</h3>\n\n<p>Float. The left boundary on the time axis of the grain cloud.</p>',positionMax:'<h3 id="gibberishgranulatorpositionmaxproperty">Gibberish.Granulator.positionMax : property</h3>\n\n<p>Float. The right boundary on the time axis of the grain cloud.</p>',buffer:'<h3 id="gibberishgranulatorbufferproperty">Gibberish.Granulator.buffer : property</h3>\n\n<p>Object. The input buffer to granulate.</p>',numberOfGrains:'<h3 id="gibberishgranulatornumberofgrainsproperty">Gibberish.Granulator.numberOfGrains : property</h3>\n\n<p>Float. The number of grains in the cloud. Can currently only be set on initialization.</p>'},type:" FX"},"Gibberish.Sine":{text:'<h1 id="gibberishsineoscillator">Gibberish.Sine </h1>\n\n<p>A sinewave calculated on a per-sample basis.</p>\n\n<h2 id="exampleusage">Example Usage</h2>\n\n<p><code>// make a sine wave <br />\nGibberish.init(); <br />\na = new Gibberish.Sine().connect();</code></p>\n\n<hr />',methods:{callback:'<h3 id="gibberishsinecallbackmethod">Gibberish.Sine.callback : method</h3>\n\n<p>Returns a single sample of output.  </p>\n\n<p>param <strong>frequency</strong> Number. The frequency to be used to calculate output. <br />\nparam <strong>amp</strong> Number. The amplitude to be used to calculate output.  </p>'},properties:{frequency:'<h3 id="gibberishsinefrequencyproperty">Gibberish.Sine.frequency : property</h3>\n\n<p>Number. From 20 - 20000 hz.</p>',amp:'<h3 id="gibberishsineampproperty">Gibberish.Sine.amp : property</h3>\n\n<p>Number. A linear value specifying relative amplitude, ostensibly from 0..1 but can be higher, or lower when used for modulation.</p>'},type:" Oscillator"},"Gibberish.Sine2":{text:'<h1 id="gibberishsine2oscillator">Gibberish.Sine2 </h1>\n\n<p>A sinewave calculated on a per-sample basis that can be panned.</p>\n\n<h2 id="exampleusage">Example Usage</h2>\n\n<p><code>// make a sine wave <br />\nGibberish.init(); <br />\na = new Gibberish.Sine2(880, .5, -.25).connect();</code></p>\n\n<hr />',methods:{callback:'<h3 id="gibberishsine2callbackmethod">Gibberish.Sine2.callback : method</h3>\n\n<p>Returns a stereo sample of output as an array.  </p>\n\n<p>param <strong>frequency</strong> Number. The frequency to be used to calculate output. <br />\nparam <strong>amp</strong> Number. The amplitude to be used to calculate output. <br />\nparam <strong>pan</strong> Number. The position in the stereo spectrum of the signal.</p>'},properties:{frequency:'<h3 id="gibberishsine2frequencyproperty">Gibberish.Sine2.frequency : property</h3>\n\n<p>Number. From 20 - 20000 hz.</p>',amp:'<h3 id="gibberishsine2ampproperty">Gibberish.Sine2.amp : property</h3>\n\n<p>Number. A linear value specifying relative amplitude, ostensibly from 0..1 but can be higher, or lower when used for modulation.</p>',pan:'<h3 id="gibberishsine2panproperty">Gibberish.Sine2.pan : property</h3>\n\n<p>Number. -1..1. The position of the sinewave in the stereo spectrum</p>'},type:" Oscillator"},"Gibberish.Saw":{text:'<h1 id="gibberishsawoscillator">Gibberish.Saw </h1>\n\n<p>A stereo, non-bandlimited saw wave calculated on a per-sample basis.</p>\n\n<h2 id="exampleusage">Example Usage</h2>\n\n<p><code>// make a saw wave <br />\nGibberish.init(); <br />\na = new Gibberish.Saw2(330, .4).connect();</code></p>\n\n<hr />',methods:{},properties:{frequency:'<h3 id="gibberishsawfrequencyproperty">Gibberish.Saw.frequency : property</h3>\n\n<p>Number. From 20 - 20000 hz.</p>',amp:'<h3 id="gibberishsawampproperty">Gibberish.Saw.amp : property</h3>\n\n<p>Number. A linear value specifying relative amplitude, ostensibly from 0..1 but can be higher, or lower when used for modulation.</p>'},type:" Oscillator"},"Gibberish.Triangle":{text:'<h1 id="gibberishtriangleoscillator">Gibberish.Triangle </h1>\n\n<p>A triangle calculated on a per-sample basis.</p>\n\n<h2 id="exampleusage">Example Usage</h2>\n\n<p><code>// make a triangle wave <br />\nGibberish.init(); <br />\na = new Gibberish.Triangle({frequency:570, amp:.35}).connect();</code></p>\n\n<hr />',methods:{},properties:{frequency:'<h3 id="gibberishtrianglefrequencyproperty">Gibberish.Triangle.frequency : property</h3>\n\n<p>Number. From 20 - 20000 hz.</p>',amp:'<h3 id="gibberishtriangleampproperty">Gibberish.Triangle.amp : property</h3>\n\n<p>Number. A linear value specifying relative amplitude, ostensibly from 0..1 but can be higher, or lower when used for modulation.</p>'},type:" Oscillator"},"Gibberish.Triangle2":{text:'<h1 id="gibberishtriangle2oscillator">Gibberish.Triangle2 </h1>\n\n<p>A triangle calculated on a per-sample basis that can be panned.</p>\n\n<h2 id="exampleusage">Example Usage</h2>\n\n<p><code>Gibberish.init(); <br />\na = new Gibberish.Triangle2(880, .5, -.25).connect();</code></p>\n\n<hr />',methods:{callback:'<h3 id="gibberishtriangle2callbackmethod">Gibberish.Triangle2.callback : method</h3>\n\n<p>Returns a stereo sample of output as an array.  </p>\n\n<p>param <strong>frequency</strong> Number. The frequency to be used to calculate output. <br />\nparam <strong>amp</strong> Number. The amplitude to be used to calculate output. <br />\nparam <strong>pan</strong> Number. The position in the stereo spectrum of the signal.</p>'},properties:{frequency:'<h3 id="gibberishtriangle2frequencyproperty">Gibberish.Triangle2.frequency : property</h3>\n\n<p>Number. From 20 - 20000 hz.</p>',amp:'<h3 id="gibberishtriangle2ampproperty">Gibberish.Triangle2.amp : property</h3>\n\n<p>Number. A linear value specifying relative amplitude, ostensibly from 0..1 but can be higher, or lower when used for modulation.</p>',pan:'<h3 id="gibberishtriangle2panproperty">Gibberish.Triangle2.pan : property</h3>\n\n<p>Number. -1..1. The position of the triangle wave in the stereo spectrum</p>'},type:" Oscillator"},"Gibberish.Saw3":{text:'<h1 id="gibberishsaw3oscillator">Gibberish.Saw3 </h1>\n\n<p>A bandlimited saw wave created using FM feedback, see http://scp.web.elte.hu/papers/synthesis1.pdf.  </p>\n\n<h2 id="exampleusage">Example Usage</h2>\n\n<p><code>// make a saw wave <br />\nGibberish.init(); <br />\na = new Gibberish.Saw3(330, .4).connect();</code></p>\n\n<hr />',methods:{callback:'<h3 id="gibberishsaw3callbackmethod">Gibberish.Saw3.callback : method</h3>\n\n<p>Returns a single sample of output.  </p>\n\n<p>param <strong>frequency</strong> Number. The frequency to be used to calculate output. <br />\nparam <strong>amp</strong> Number. The amplitude to be used to calculate output.  </p>'},properties:{frequency:'<h3 id="gibberishsaw3frequencyproperty">Gibberish.Saw3.frequency : property</h3>\n\n<p>Number. From 20 - 20000 hz.</p>',amp:'<h3 id="gibberishsaw3ampproperty">Gibberish.Saw3.amp : property</h3>\n\n<p>Number. A linear value specifying relative ampltiude, ostensibly from 0..1 but can be higher, or lower when used for modulation.</p>'},type:" Oscillator"},"Gibberish.PWM":{text:'<h1 id="gibberishpwmoscillator">Gibberish.PWM </h1>\n\n<p>A bandlimited pulsewidth modulation wave created using FM feedback, see http://scp.web.elte.hu/papers/synthesis1.pdf.</p>\n\n<h2 id="exampleusage">Example Usage</h2>\n\n<p><code>// make a pwm wave <br />\nGibberish.init(); <br />\na = new Gibberish.PWM(330, .4, .9).connect();</code></p>\n\n<hr />',methods:{callback:'<h3 id="gibberishpwmcallbackmethod">Gibberish.PWM.callback : method</h3>\n\n<p>Returns a single sample of output.  </p>\n\n<p>param <strong>frequency</strong> Number. The frequency to be used to calculate output. <br />\nparam <strong>amp</strong> Number. The amplitude to be used to calculate output. <br />\nparam <strong>pulsewidth</strong> Number. The duty cycle of the waveform</p>'},properties:{frequency:'<h3 id="gibberishpwmfrequencyproperty">Gibberish.PWM.frequency : property</h3>\n\n<p>Number. From 20 - 20000 hz.</p>',amp:'<h3 id="gibberishpwmampproperty">Gibberish.PWM.amp : property</h3>\n\n<p>Number. A linear value specifying relative ampltiude, ostensibly from 0..1 but can be higher, or lower when used for modulation.</p>',pulsewidth:'<h3 id="gibberishpwmpulsewidthproperty">Gibberish.PWM.pulsewidth : property</h3>\n\n<p>Number. 0..1. The width of the waveform\'s duty cycle.</p>'},type:" Oscillator"},"Gibberish.Noise":{text:'<h1 id="gibberishnoiseoscillator">Gibberish.Noise </h1>\n\n<p>A white noise oscillator</p>\n\n<h2 id="exampleusage">Example Usage</h2>\n\n<p><code>// make some noise\nGibberish.init(); <br />\na = new Gibberish.Noise(.4).connect();</code></p>\n\n<hr />',methods:{},properties:{amp:'<h3 id="gibberishnoiseampproperty">Gibberish.Noise.amp : property</h3>\n\n<p>Number. A linear value specifying relative amplitude, ostensibly from 0..1 but can be higher, or lower when used for modulation.</p>'},type:" Oscillator"},"Gibberish.KarplusStrong":{text:'<h1 id="gibberishkarplusstrongphysicalmodel">Gibberish.KarplusStrong </h1>\n\n<p>A plucked-string model.  </p>\n\n<h2 id="exampleusage">Example Usage</h2>\n\n<p><code>Gibberish.init(); <br />\na = new Gibberish.KarplusStrong({ damping:.6 }).connect(); <br />\na.note(440);\n</code></p>\n\n<hr />',methods:{},properties:{blend:'<h3 id="gibberishkarplusstrongblendproperty">Gibberish.KarplusStrong.blend : property</h3>\n\n<p>Number. 0..1. The likelihood that the sign of any given sample will be flipped. A value of 1 means there is no chance, a value of 0 means each samples sign will be flipped. This introduces noise into the model which can be used for various effects.</p>',damping:'<h3 id="gibberishkarplusstrongdampingproperty">Gibberish.KarplusStrong.damping : property</h3>\n\n<p>Number. 0..1. Higher amounts of damping shorten the decay of the sound generated by each note.</p>',amp:'<h3 id="gibberishkarplusstrongampproperty">Gibberish.KarplusStrong.amp : property</h3>\n\n<p>Number. A linear value specifying relative amplitude, ostensibly from 0..1 but can be higher, or lower when used for modulation.</p>',channels:'<h3 id="gibberishkarplusstrongchannelsproperty">Gibberish.KarplusStrong.channels : property</h3>\n\n<p>Number. Default 2. If two channels, the signal may be panned.</p>',pan:'<h3 id="gibberishkarplusstrongpanproperty">Gibberish.KarplusStrong.pan : property</h3>\n\n<p>Number. Default 0. The position in the stereo spectrum for the sound, from -1..1.</p>'},type:" Physical Model"},"Gibberish.Sampler":{text:'<h1 id="gibberishsampleroscillator">Gibberish.Sampler </h1>\n\n<p>Sample recording and playback.</p>\n\n<h2 id="exampleusage">Example Usage</h2>\n\n<p><code>Gibberish.init(); <br />\na = new Gibberish.Sampler({ file:\'resources/snare.wav\' }).connect(); <br />\na.note(2); <br />\na.note(1); <br />\na.note(-.5); <br />\nb = new Gibberish.Sampler().connect(); <br />\nb.record(a, 88200); // record two seconds of a playing <br />\na.note(8); <br />\n// wait a bit <br />\nb.note(1);</code>\n`</p>\n\n<h2 id="constructor">Constructor</h2>\n\n<h3 id="syntax1">syntax 1</h3>\n\n<p><strong>param</strong> <em>filepath</em>: String. A path to the audiofile to be opened by the sampler.  </p>\n\n<h3 id="syntax2">syntax 2</h3>\n\n<p><strong>param</strong> <em>properties</em>: Object. A dictionary of property values (see below) to set for the sampler on initialization.</p>\n\n<hr />',methods:{_onload:'<h3 id="gibberishsampler_onloadmethod">Gibberish.Sampler._onload : method</h3>\n\n<p>This is an event handler that is called when a sampler has finished loading an audio file  </p>\n\n<p>param <strong>buffer</strong> Object. The decoded sampler buffers from the audio file</p>',note:'<h3 id="gibberishsamplernotemethod">Gibberish.Sampler.note : method</h3>\n\n<p>Trigger playback of the samplers buffer</p>\n\n<p>param <strong>pitch</strong> Number. The speed the sample is played back at. <br />\nparam <strong>amp</strong> Number. Optional. The volume to use.</p>',record:'<h3 id="gibberishsamplerrecordmethod">Gibberish.Sampler.record : method</h3>\n\n<p>Record the output of a Gibberish ugen for a given amount of time</p>\n\n<p>param <strong>ugen</strong> Object. The Gibberish ugen to be recorded.\nparam <strong>recordLength</strong> Number (in samples). How long to record for.</p>',getBuffer:'<h3 id="gibberishsamplergetbuffermethod">Gibberish.Sampler.getBuffer : method</h3>\n\n<p>Returns a pointer to the Sampler\'s internal buffer.  </p>',callback:'<h3 id="gibberishsamplercallbackmethod">Gibberish.Sampler.callback : method</h3>\n\n<p>Return a single sample. It\'s a pretty lengthy method signature, they are all properties that have already been listed:  </p>\n\n<p>_pitch, amp, isRecording, isPlaying, input, length, start, end, loops, pan</p>'},properties:{pitch:'<h3 id="gibberishsamplerpitchproperty">Gibberish.Sampler.pitch : property</h3>\n\n<p>Number. The speed that the sample is played back at. A pitch of 1 means the sample plays forward at speed it was recorded at, a pitch of -4 means the sample plays backwards at 4 times the speed it was recorded at.</p>',amp:'<h3 id="gibberishsamplerampproperty">Gibberish.Sampler.amp : property</h3>\n\n<p>Number. A linear value specifying relative amplitude, ostensibly from 0..1 but can be higher, or lower when used for modulation.</p>',isRecording:'<h3 id="gibberishsamplerisrecordingproperty">Gibberish.Sampler.isRecording : property</h3>\n\n<p>Boolean. Tells the sample to record into it\'s buffer. This is handled automatically by the object; there is no need to manually set this property.</p>',isPlaying:'<h3 id="gibberishsamplerisplayingproperty">Gibberish.Sampler.isPlaying : property</h3>\n\n<p>Number. 0..1. Tells the sample to record into it\'s buffer. This is handled automatically by the object; there is no need to manually set this property.</p>',input:'<h3 id="gibberishsamplerinputproperty">Gibberish.Sampler.input : property</h3>\n\n<p>Object. The object the sampler is tapping into and recording.</p>',length:'<h3 id="gibberishsamplerlengthproperty">Gibberish.Sampler.length : property</h3>\n\n<p>Number. The length of the Sampler\'s buffer.</p>',start:'<h3 id="gibberishsamplerstartproperty">Gibberish.Sampler.start : property</h3>\n\n<p>Number. When the Sampler\'s note method is called, sample playback begins at this sample.</p>',end:'<h3 id="gibberishsamplerendproperty">Gibberish.Sampler.end : property</h3>\n\n<p>Number. When the Sampler\'s note method is called, sample playback ends at this sample.</p>',loops:'<h3 id="gibberishsamplerloopsproperty">Gibberish.Sampler.loops : property</h3>\n\n<p>Boolean. When true, sample playback loops continuously between the start and end property values.</p>',pan:'<h3 id="gibberishsamplerpanproperty">Gibberish.Sampler.pan : property</h3>\n\n<p>Number. -1..1. Position of the Sampler in the stereo spectrum.</p>'},type:" Oscillator"},Gibberish:{text:'<h1 id="gibberishmiscellaneous">Gibberish </h1>\n\n<p>Gibberish is the main object used to manage the audio graph and perform codegen functions. All constructors are also inside of the Gibberish object. Gibberish can automatically generate an appropriate web audio callback for you; if you want to use this you must execute the Gibberish.init() command before creating any Gibberish ugens.</p>\n\n<h2 id="exampleusage">Example Usage</h2>\n\n<p><code>// make a sine wave <br />\nGibberish.init(); <br />\na = new Gibberish.Sine().connect();</code></p>\n\n<h2 id="constructor">Constructor</h2>\n\n<p><strong>param</strong> <em>bufferSize</em>: Integer. Default 1024. The size of the buffer to be calculated. Since JavaScript is single-threaded, setting exceedingly large values for this will yield to stuttering in graphics and user interface performance.</p>\n\n<hr />',methods:{createCallback:'<h3 id="gibberishcreatecallbackmethod">Gibberish.createCallback : method</h3>\n\n<p>Perform codegen on all dirty ugens and re-create the audio callback. This method is called automatically in the default Gibberish sample loop whenever Gibberish.isDirty is true.</p>',audioProcess:'<h3 id="gibberishaudioprocessmethod">Gibberish.audioProcess : method</h3>\n\n<p>The default audio callback used in Webkit browsers. This callback starts running as soon as Gibberish.init() is called.  </p>\n\n<p>param <strong>Audio Event</strong> : Object. The HTML5 audio event object.</p>',audioProcessFirefox:'<h3 id="gibberishaudioprocessfirefoxmethod">Gibberish.audioProcessFirefox : method</h3>\n\n<p>The default audio callback used in Firefox. This callback starts running as soon as Gibberish.init() is called.  </p>\n\n<p>param <strong>Sound Data</strong> : Object. The buffer of audio data to be filled</p>',clear:'<h3 id="gibberishclearmethod">Gibberish.clear : method</h3>\n\n<p>Remove all objects from Gibberish graph and perform codegen... kills all running sound and CPU usage.</p>',dirty:"<h3 id=\"gibberishdirtymethod\">Gibberish.dirty : method</h3>\n\n<p>Tell Gibberish a ugen needs to be codegen'd and mark the entire callback as needing regeneration  </p>\n\n<p>param <strong>Ugen</strong> : Object. The ugen that is 'dirtied'... that has a property value changed.</p>",generateSymbol:'<h3 id="gibberishgeneratesymbolmethod">Gibberish.generateSymbol : method</h3>\n\n<p>Generate a unique symbol for a given ugen using its name and a unique id number.  </p>\n\n<p>param <strong>name</strong> : String. The name of the ugen; for example, reverb, delay etc.</p>',AudioDataDestination:'<h3 id="gibberishaudiodatadestinationmethod">Gibberish.AudioDataDestination : method</h3>\n\n<p>Create a callback and start it running. Note that in iOS audio callbacks can only be created in response to user events. Thus, in iOS this method assigns an event handler to the HTML body that creates the callback as soon as the body is touched; at that point the event handler is removed. </p>',makePanner:'<h3 id="gibberishmakepannermethod">Gibberish.makePanner : method</h3>\n\n<p>Create and return an object that can be used to pan a stereo source.</p>',polyInit:"<h3 id=\"gibberishpolyinitmethod\">Gibberish.polyInit : method</h3>\n\n<p>For ugens with polyphony, add metaprogramming that passes on property changes to the 'children' of the polyphonic object. Polyphonic ugens in Gibberish are just single instances that are routed into a shared bus, along with a few special methods for voice allocation etc.  </p>\n\n<p>param <strong>Ugen</strong> : Object. The polyphonic ugen</p>",interpolate:'<h3 id="gibberishinterpolatemethod">Gibberish.interpolate : method</h3>\n\n<p>Similiar to makePanner, this method returns a function that can be used to linearly interpolate between to values. The resulting function takes an array and a floating point position index and returns a value.</p>',ugen:'<h3 id="gibberishugenmethod">Gibberish.ugen : method</h3>\n\n<p>Creates a prototype object that is used by all ugens.</p>'},properties:{audioFiles:'<h3 id="gibberishaudiofilesproperty">Gibberish.audioFiles : property</h3>\n\n<p>Array. Anytime an audiofile is loaded (normally using the Sampler ugen) the resulting sample buffer is stored in this array so that it can be immediately recalled.</p>',callback:'<h3 id="gibberishcallbackproperty">Gibberish.callback : property</h3>\n\n<p>String. Whenever Gibberish performs code generation the resulting callback is stored here.</p>',out:"<h3 id=\"gibberishoutproperty\">Gibberish.out : property</h3>\n\n<p>Object. The is the 'master' bus that everything eventually gets routed to if you're using the auto-generated calback. This bus is initialized in the call to Gibberish.init.</p>",dirtied:'<h3 id="gibberishdirtiedproperty">Gibberish.dirtied : property</h3>\n\n<p>Array. A list of objects that need to be codegen\'d</p>',isDirty:'<h3 id="gibberishisdirtyproperty">Gibberish.isDirty : property</h3>\n\n<p>Booelan. Whether or codegen should be performed.</p>',codeblock:"<h3 id=\"gibberishcodeblockproperty\">Gibberish.codeblock : property</h3>\n\n<p>Array. During codegen, each ugen's codeblock is inserted into this array. Once all the ugens have codegen'd, the array is concatenated to form the callback.</p>",upvalues:"<h3 id=\"gibberishupvaluesproperty\">Gibberish.upvalues : property</h3>\n\n<p>Array. Each ugen's callback function is stored in this array; the contents of the array become upvalues to the master callback function when it is codegen'd.</p>",debug:'<h3 id="gibberishdebugproperty">Gibberish.debug : property</h3>\n\n<p>Boolean. Default false. When true, the callbackString is printed to the console whenever a codegen is performed</p>',memo:'<h3 id="gibberishmemoproperty">Gibberish.memo : property</h3>\n\n<p>Object. Used in the codegen process to make sure codegen for each ugen is only performed once.</p>'},type:" Miscellaneous"},Ugen:{text:'<h1 id="ugenmiscellaneous">Ugen </h1>\n\n<p>The prototype object that all ugens inherit from</p>',methods:{processProperties:'<h3 id="ugenprocesspropertiesmethod">Ugen.processProperties : method</h3>\n\n<p>Used to assign and process arguments passed to the constructor functions of ugens.  </p>\n\n<p>param <strong>argumentList</strong> : Array. A list of arguments (may be a single dictionary) passed to a ugen constructor.</p>',codegen:'<h3 id="ugencodegenmethod">Ugen.codegen : method</h3>\n\n<p>Generates output code (as a string) used inside audio callback</p>',getCodeblock:'<h3 id="ugengetcodeblockmethod">Ugen.getCodeblock : method</h3>\n\n<p>Retrieves codeblock for ugen previously created with codegen method.</p>',defineUgenProperty:'<h3 id="ugendefineugenpropertymethod">Ugen.defineUgenProperty : method</h3>\n\n<p>Creates getters and setters for ugen properties that automatically dirty the ugen whenever the property value is changed.  </p>\n\n<p>param <strong>key</strong> : String. The name of a property to add getter / setters for. <br />\nparam <strong>value</strong> : Any. The initival value to set the property to</p>',init:'<h3 id="ugeninitmethod">Ugen.init : method</h3>\n\n<p>Initialize ugen by calling defineUgenProperty for every key in the ugen\'s properties dictionary, generating a unique id for the ugen and various other small tasks.</p>',mod:'<h3 id="ugenmodmethod">Ugen.mod : method</h3>\n\n<p>Modulate a property of a ugen on a per-sample basis.  </p>\n\n<p>param <strong>key</strong> : String. The name of the property to modulate <br />\nparam <strong>value</strong> : Any. The object or number value to modulate the property with <br />\nparam <strong>op</strong> : String. Default "+". The operation to perform. Can be +,-,*,/,= or ++. ++ adds and returns the absolute value.</p>',removeMod:'<h3 id="ugenremovemodmethod">Ugen.removeMod : method</h3>\n\n<p>Remove a modulation from a ugen.  </p>\n\n<p>param <strong>key</strong> : String. The name of the property to remove the modulation from <br />\nparam <strong>arg</strong> : Number or Object. Optional. This determines which modulation to remove if more than one are assigned to the property. If this argument is undefined, all modulations are removed. If the argument is a number, the number represents a modulation in the order that they were applied (an array index). If the argument is an object, it removes a modulation that\nis using a matching object as the modulator.</p>',polyMod:'<h3 id="ugenpolymodmethod">Ugen.polyMod : method</h3>\n\n<p>Applies a modulation to all children of a polyphonic ugen  </p>\n\n<p>param <strong>key</strong> : String. The name of the property to modulate <br />\nparam <strong>value</strong> : Any. The object or number value to modulate the property with <br />\nparam <strong>op</strong> : String. Default "+". The operation to perform. Can be +,-,*,/,= or ++. ++ adds and returns the absolute value.</p>',removePolyMod:'<h3 id="ugenremovepolymodmethod">Ugen.removePolyMod : method</h3>\n\n<p>Removes a modulation from all children of a polyphonic ugen. The arguments  </p>\n\n<p>param <strong>arg</strong> : Number or Object. Optional. This determines which modulation to remove if more than one are assigned to the property. If this argument is undefined, all modulations are removed. If the argument is a number, the number represents a modulation in the order that they were applied (an array index). If the argument is an object, it removes a modulation that\nis using a matching object as the modulator.</p>',connect:'<h3 id="ugenconnectmethod">Ugen.connect : method</h3>\n\n<p>Connect the output of a ugen to a bus.  </p>\n\n<p>param <strong>bus</strong> : Bus ugen. Optional. The bus to connect the ugen to. If no argument is passed the ugen is connect to Gibberish.out. Gibberish.out is automatically created when Gibberish.init() is called and can be thought of as the master stereo output for Gibberish.</p>',send:'<h3 id="ugensendmethod">Ugen.send : method</h3>\n\n<p>Send an arbitrary amount of output to a bus  </p>\n\n<p>param <strong>bus</strong> : Bus ugen. The bus to send the ugen to. <br />\nparam <strong>amount</strong> : Float. The amount of signal to send to the bus. </p>',disconnect:'<h3 id="ugendisconnectmethod">Ugen.disconnect : method</h3>\n\n<p>Disconnect a ugen from a bus (or all busses). This stops all audio and signal processing for the ugen.  </p>\n\n<p>param <strong>bus</strong> : Bus ugen. Optional. The bus to send the ugen to. If this argument is undefined the ugen will be disconnected from all busses.</p>'},properties:{},type:" Miscellaneous"},"Gibberish.Bus":{text:'<h1 id="gibberishbusmiscellaneous">Gibberish.Bus </h1>\n\n<p>Create a mono routing bus. A bus callback routes all it\'s inputs and scales them by the amplitude of the bus.  </p>\n\n<p>For a stereo routing bus, see <a href="javascript:displayDocs(\'Gibberish.Bus2\')">Bus2</a></p>\n\n<h2 id="exampleusage">Example Usage##</h2>\n\n<p><code>a = new Gibberish.Bus(); <br />\nb = new Gibberish.Sine(440).connect(a); <br />\nc = new Gibberish.Sine(880).connect(a); <br />\na.amp = .1; <br />\na.connect();</code></p>\n\n<h2 id="constructor">Constructor</h2>\n\n<p><strong>param</strong> <em>properties</em>: Object. A dictionary of property values (see below) to set for the bus on initialization.</p>',methods:{},properties:{amp:'<h3 id="gibberishbusampproperty">Gibberish.Bus.amp : property</h3>\n\n<p>Array. Read-only. Relative volume for the sum of all ugens connected to the bus.</p>'},type:" Miscellaneous"},"Gibberish.Bus2":{text:'<h1 id="gibberishbus2miscellaneous">Gibberish.Bus2 </h1>\n\n<p>Create a stereo outing bus. A bus callback routes all it\'s inputs and scales them by the amplitude of the bus.</p>\n\n<h2 id="exampleusage">Example Usage##</h2>\n\n<p><code>a = new Gibberish.Bus(); <br />\nb = new Gibberish.Sine(440).connect(a); <br />\nc = new Gibberish.Sine(880).connect(a); <br />\na.amp = .1; <br />\na.connect();</code></p>\n\n<h2 id="constructor">Constructor</h2>\n\n<p><strong>param</strong> <em>properties</em>: Object. A dictionary of property values (see below) to set for the bus on initialization.</p>',methods:{},properties:{},type:" Miscellaneous"}};
